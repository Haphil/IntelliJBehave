/* The following code was generated by JFlex 1.4.3 on 15.04.15 16:49 */

package com.github.kumaraman21.intellijbehave.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.github.kumaraman21.intellijbehave.parser.IJBehaveElementType.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 15.04.15 16:49 from the specification file
 * <tt>C:/Users/debritod/Work/Intellij-Idea/IntelliJBehave/src/com/github/kumaraman21/intellijbehave/parser/_JBehaveLexer.flex</tt>
 */
public class _JBehaveLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = "\11\0\1\2\1\4\1\11\1\2\1\3\22\0\1\22\1\6\12\0" +
          "\1\24\1\7\1\21\1\16\12\23\1\14\1\0\1\10\1\0\1\12" +
          "\1\0\1\20\1\46\1\60\2\13\1\50\1\13\1\41\4\13\1\55" +
          "\1\25\1\31\4\13\1\35\1\45\2\13\1\43\2\13\1\5\1\0" +
          "\1\16\2\0\1\17\1\0\1\30\1\15\1\36\1\47\1\26\1\56" +
          "\1\15\1\44\1\33\2\15\1\54\1\52\1\37\1\40\1\53\1\15" +
          "\1\32\1\42\1\27\1\15\1\34\1\15\1\51\1\57\1\15\1\0" +
          "\1\1\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 = "\1\0\1\1\1\2\1\3\3\4\1\1\1\5\1\6" +
            "\1\7\1\1\1\10\1\1\1\11\1\1\1\12\16\1" +
            "\1\0\1\13\1\14\16\1\1\15\2\16\1\1\1\0" +
            "\1\16\7\1\1\17\5\1\1\0\2\16\5\1\1\20" +
            "\1\21\4\1\2\22\1\0\2\23\1\1\1\24\2\1" +
            "\1\25\10\1\1\26\3\1\1\27\5\1\1\30\6\1" +
            "\1\31\1\1\1\32\1\1\1\33\1\1\1\34\2\1" +
            "\1\35";

  private static int [] zzUnpackAction() {
      int[] result = new int[126];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\61\0\142\0\223\0\304\0\142\0\365\0\u0126" +
            "\0\u0157\0\142\0\u0188\0\365\0\61\0\u01b9\0\61\0\u01ea" +
            "\0\142\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341" +
            "\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9" +
            "\0\u04fa\0\61\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620" +
            "\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8" +
            "\0\u07d9\0\u0498\0\u04c9\0\u080a\0\u083b\0\u080a\0\u086c\0\u089d" +
            "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u0405\0\u09c3\0\u09f4" +
            "\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c" +
            "\0\u0bad\0\u0bde\0\u0c0f\0\u0405\0\u0405\0\u0c40\0\u0c71\0\u0ca2" +
            "\0\u0cd3\0\u0a87\0\u0ab8\0\u0d04\0\u0ae9\0\u0b1a\0\u0d35\0\61" +
            "\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd" +
            "\0\u0eee\0\u0f1f\0\u0f50\0\61\0\u0f81\0\u0fb2\0\u0fe3\0\u0ebd" +
            "\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\61\0\u1109\0\u113a" +
            "\0\u116b\0\u119c\0\u11cd\0\u11fe\0\61\0\u122f\0\61\0\u1260" +
            "\0\61\0\u1291\0\61\0\u12c2\0\u12f3\0\61";

  private static int [] zzUnpackRowMap() {
      int[] result = new int[126];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 = "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2" +
            "\1\11\1\12\1\13\1\14\1\15\2\16\1\2\1\17" +
            "\1\2\1\4\1\20\1\21\1\22\3\16\1\23\3\16" +
            "\1\24\3\16\1\25\1\16\1\26\1\16\1\27\1\30" +
            "\1\16\1\31\4\16\1\32\2\16\1\33\1\2\4\0" +
            "\4\2\1\0\10\2\1\0\1\2\1\0\34\2\63\0" +
            "\1\4\1\5\2\6\14\0\1\4\42\0\1\6\54\0" +
            "\1\2\4\0\1\34\1\2\1\34\1\2\1\0\1\2" +
            "\1\34\1\35\1\34\1\2\3\34\1\0\1\34\1\0" +
            "\34\34\1\2\4\0\2\2\1\36\1\2\1\0\10\2" +
            "\1\0\1\2\1\0\34\2\1\37\1\40\3\0\3\37" +
            "\1\41\1\0\10\37\1\0\1\37\1\40\34\37\1\2" +
            "\4\0\4\2\1\0\1\42\7\2\1\0\1\2\1\0" +
            "\35\2\4\0\1\34\1\2\1\34\1\2\1\0\1\2" +
            "\1\34\1\2\1\34\1\2\3\34\1\0\1\34\1\0" +
            "\34\34\1\2\4\0\1\34\1\2\1\34\1\2\1\0" +
            "\1\2\1\34\1\2\1\34\1\2\2\34\1\43\1\0" +
            "\1\44\1\0\34\34\1\2\4\0\1\34\1\2\1\34" +
            "\1\2\1\0\1\2\1\34\1\35\1\34\1\2\3\34" +
            "\1\0\1\34\1\0\1\34\1\45\32\34\1\2\4\0" +
            "\1\34\1\2\1\34\1\2\1\0\1\2\1\34\1\35" +
            "\1\34\1\2\3\34\1\0\1\34\1\0\3\34\1\46" +
            "\30\34\1\2\4\0\1\34\1\2\1\34\1\2\1\0" +
            "\1\2\1\34\1\35\1\34\1\2\3\34\1\0\1\34" +
            "\1\0\11\34\1\47\22\34\1\2\4\0\1\34\1\2" +
            "\1\34\1\2\1\0\1\2\1\34\1\35\1\34\1\2" +
            "\3\34\1\0\1\34\1\0\6\34\1\50\25\34\1\2" +
            "\4\0\1\34\1\2\1\34\1\2\1\0\1\2\1\34" +
            "\1\35\1\34\1\2\3\34\1\0\1\34\1\0\17\34" +
            "\1\51\14\34\1\2\4\0\1\34\1\2\1\34\1\2" +
            "\1\0\1\2\1\34\1\35\1\34\1\2\3\34\1\0" +
            "\1\34\1\0\17\34\1\52\14\34\1\2\4\0\1\34" +
            "\1\2\1\34\1\2\1\0\1\2\1\34\1\35\1\34" +
            "\1\2\3\34\1\0\1\34\1\0\12\34\1\53\16\34" +
            "\1\54\2\34\1\2\4\0\1\34\1\2\1\34\1\2" +
            "\1\0\1\2\1\34\1\35\1\34\1\2\3\34\1\0" +
            "\1\34\1\0\24\34\1\55\7\34\1\2\4\0\1\34" +
            "\1\2\1\34\1\2\1\0\1\2\1\34\1\35\1\34" +
            "\1\2\3\34\1\0\1\34\1\0\6\34\1\56\25\34" +
            "\1\2\4\0\1\34\1\2\1\34\1\2\1\0\1\2" +
            "\1\34\1\35\1\34\1\2\3\34\1\0\1\34\1\0" +
            "\1\34\1\57\32\34\1\2\4\0\1\34\1\2\1\34" +
            "\1\2\1\0\1\2\1\34\1\2\1\34\1\60\3\34" +
            "\1\0\1\34\1\0\34\34\1\2\4\0\1\16\3\2" +
            "\1\0\1\2\1\16\1\2\2\16\3\2\1\0\1\16" +
            "\1\0\34\16\1\2\4\0\2\2\1\61\1\2\1\0" +
            "\10\2\1\0\1\2\1\0\34\2\1\37\1\40\3\0" +
            "\4\37\1\0\1\62\7\37\1\0\1\37\1\40\34\37" +
            "\2\40\3\0\4\40\1\0\1\63\7\40\1\0\36\40" +
            "\1\64\1\65\3\0\4\64\1\0\1\66\7\64\1\0" +
            "\1\64\1\65\34\64\1\2\4\0\1\34\1\2\1\34" +
            "\1\2\1\0\1\2\1\34\1\2\1\34\1\60\3\34" +
            "\1\0\1\67\1\0\34\34\1\2\4\0\1\34\1\2" +
            "\1\34\1\2\1\0\1\2\1\34\1\2\1\34\1\60" +
            "\2\34\1\43\1\0\1\44\1\0\34\34\1\2\4\0" +
            "\1\34\1\2\1\34\1\2\1\0\1\2\1\34\1\2" +
            "\1\34\1\60\3\34\1\0\1\34\1\0\2\34\1\70" +
            "\31\34\1\2\4\0\1\34\1\2\1\34\1\2\1\0" +
            "\1\2\1\34\1\2\1\34\1\60\3\34\1\0\1\34" +
            "\1\0\5\34\1\71\26\34\1\2\4\0\1\34\1\2" +
            "\1\34\1\2\1\0\1\2\1\34\1\2\1\34\1\60" +
            "\3\34\1\0\1\34\1\0\1\34\1\72\32\34\1\2" +
            "\4\0\1\34\1\2\1\34\1\2\1\0\1\2\1\34" +
            "\1\2\1\34\1\60\3\34\1\0\1\34\1\0\7\34" +
            "\1\73\24\34\1\2\4\0\1\34\1\2\1\34\1\2" +
            "\1\0\1\2\1\34\1\2\1\34\1\60\3\34\1\0" +
            "\1\34\1\0\1\34\1\74\32\34\1\2\4\0\1\34" +
            "\1\2\1\34\1\2\1\0\1\2\1\34\1\2\1\34" +
            "\1\60\3\34\1\0\1\34\1\0\1\34\1\75\32\34" +
            "\1\2\4\0\1\34\1\2\1\34\1\2\1\0\1\2" +
            "\1\34\1\2\1\34\1\60\3\34\1\0\1\34\1\0" +
            "\22\34\1\76\11\34\1\2\4\0\1\34\1\2\1\34" +
            "\1\2\1\0\1\2\1\34\1\2\1\34\1\60\3\34" +
            "\1\0\1\34\1\0\2\34\1\77\31\34\1\2\4\0" +
            "\1\34\1\2\1\34\1\2\1\0\1\2\1\34\1\2" +
            "\1\34\1\60\3\34\1\0\1\34\1\0\3\34\1\100" +
            "\30\34\1\2\4\0\1\34\1\2\1\34\1\2\1\0" +
            "\1\2\1\34\1\2\1\34\1\60\3\34\1\0\1\34" +
            "\1\0\31\34\1\101\2\34\1\2\4\0\1\34\1\2" +
            "\1\34\1\2\1\0\1\2\1\34\1\2\1\34\1\60" +
            "\3\34\1\0\1\34\1\0\31\34\1\102\2\34\1\2" +
            "\4\0\1\103\1\2\1\103\1\2\1\0\1\2\1\103" +
            "\1\2\1\103\1\2\3\103\1\104\1\103\1\0\34\103" +
            "\4\61\1\0\54\61\1\64\1\65\3\0\4\64\1\0" +
            "\1\105\7\64\1\0\1\64\1\65\34\64\2\65\3\0" +
            "\4\65\1\0\1\106\7\65\1\0\36\65\1\2\4\0" +
            "\1\34\1\2\1\34\1\2\1\0\1\2\1\34\1\2" +
            "\1\34\1\60\2\34\1\107\1\0\1\67\1\0\34\34" +
            "\1\2\4\0\1\34\1\2\1\34\1\2\1\0\1\2" +
            "\1\34\1\2\1\34\1\60\3\34\1\0\1\34\1\0" +
            "\3\34\1\110\30\34\1\2\4\0\1\34\1\2\1\34" +
            "\1\2\1\0\1\2\1\34\1\2\1\34\1\60\3\34" +
            "\1\0\1\34\1\0\5\34\1\111\26\34\1\2\4\0" +
            "\1\34\1\2\1\34\1\2\1\0\1\2\1\34\1\2" +
            "\1\34\1\60\3\34\1\0\1\34\1\0\12\34\1\112" +
            "\21\34\1\2\4\0\1\34\1\2\1\34\1\2\1\0" +
            "\1\2\1\34\1\2\1\34\1\60\3\34\1\0\1\34" +
            "\1\0\1\34\1\113\32\34\1\2\4\0\1\34\1\2" +
            "\1\34\1\2\1\0\1\2\1\34\1\2\1\34\1\60" +
            "\3\34\1\0\1\34\1\0\12\34\1\114\21\34\1\2" +
            "\4\0\1\34\1\2\1\34\1\2\1\0\1\2\1\34" +
            "\1\2\1\34\1\60\3\34\1\0\1\34\1\0\12\34" +
            "\1\115\21\34\1\2\4\0\1\34\1\2\1\34\1\2" +
            "\1\0\1\2\1\34\1\2\1\34\1\60\3\34\1\0" +
            "\1\34\1\0\1\34\1\116\32\34\1\2\4\0\1\34" +
            "\1\2\1\34\1\2\1\0\1\2\1\34\1\2\1\34" +
            "\1\60\3\34\1\0\1\34\1\0\25\34\1\117\6\34" +
            "\1\2\4\0\1\34\1\2\1\34\1\2\1\0\1\2" +
            "\1\34\1\2\1\34\1\60\3\34\1\0\1\34\1\0" +
            "\1\34\1\120\32\34\1\2\4\0\1\34\1\2\1\34" +
            "\1\2\1\0\1\2\1\34\1\2\1\34\1\60\3\34" +
            "\1\0\1\34\1\0\13\34\1\121\20\34\1\2\4\0" +
            "\1\122\1\2\1\103\1\2\1\0\1\2\1\122\1\2" +
            "\1\122\1\60\3\103\1\104\1\122\1\0\34\122\5\0" +
            "\1\123\1\0\1\104\3\0\1\123\1\0\1\123\1\124" +
            "\4\104\1\123\1\0\34\123\1\64\1\65\3\0\4\64" +
            "\1\0\1\125\7\64\1\0\1\64\1\65\34\64\2\65" +
            "\3\0\4\65\1\0\1\126\7\65\1\0\36\65\1\2" +
            "\4\0\1\34\1\2\1\34\1\2\1\0\1\2\1\34" +
            "\1\2\1\34\1\60\3\34\1\0\1\127\1\0\34\34" +
            "\1\2\4\0\1\34\1\2\1\34\1\2\1\0\1\2" +
            "\1\34\1\130\1\34\1\60\3\34\1\0\1\34\1\0" +
            "\34\34\1\2\4\0\1\34\1\2\1\34\1\2\1\0" +
            "\1\2\1\34\1\2\1\34\1\60\3\34\1\0\1\34" +
            "\1\0\3\34\1\131\30\34\1\2\4\0\1\34\1\2" +
            "\1\34\1\2\1\0\1\2\1\34\1\2\1\34\1\60" +
            "\3\34\1\0\1\34\1\0\3\34\1\132\30\34\1\2" +
            "\4\0\1\34\1\2\1\34\1\2\1\0\1\2\1\34" +
            "\1\2\1\34\1\60\3\34\1\0\1\34\1\0\12\34" +
            "\1\133\21\34\1\2\4\0\1\34\1\2\1\34\1\2" +
            "\1\0\1\2\1\34\1\2\1\34\1\60\3\34\1\0" +
            "\1\34\1\0\5\34\1\134\26\34\1\2\4\0\1\34" +
            "\1\2\1\34\1\2\1\0\1\2\1\34\1\2\1\34" +
            "\1\60\3\34\1\0\1\34\1\0\26\34\1\135\5\34" +
            "\1\2\4\0\1\34\1\2\1\34\1\2\1\0\1\2" +
            "\1\34\1\2\1\34\1\60\3\34\1\0\1\34\1\0" +
            "\11\34\1\136\22\34\1\2\4\0\1\34\1\2\1\34" +
            "\1\2\1\0\1\2\1\34\1\2\1\34\1\60\3\34" +
            "\1\0\1\34\1\0\5\34\1\137\26\34\5\0\1\104" +
            "\1\0\1\104\3\0\1\104\1\0\1\104\1\0\5\104" +
            "\1\0\34\104\1\2\4\0\1\34\1\2\1\34\1\2" +
            "\1\0\1\2\1\34\1\2\1\34\1\60\2\34\1\140" +
            "\1\0\1\127\1\0\34\34\1\2\4\0\1\34\1\2" +
            "\1\34\1\2\1\0\1\2\1\34\1\2\1\34\1\60" +
            "\3\34\1\0\1\34\1\0\2\34\1\141\31\34\1\2" +
            "\4\0\1\34\1\2\1\34\1\2\1\0\1\2\1\34" +
            "\1\2\1\34\1\60\3\34\1\0\1\34\1\0\5\34" +
            "\1\142\26\34\1\2\4\0\1\34\1\2\1\34\1\2" +
            "\1\0\1\2\1\34\1\2\1\34\1\60\3\34\1\0" +
            "\1\34\1\0\10\34\1\143\23\34\1\2\4\0\1\34" +
            "\1\2\1\34\1\2\1\0\1\2\1\34\1\144\1\34" +
            "\1\60\3\34\1\0\1\34\1\0\34\34\1\2\4\0" +
            "\1\34\1\2\1\34\1\2\1\0\1\2\1\34\1\2" +
            "\1\34\1\60\3\34\1\0\1\34\1\0\27\34\1\145" +
            "\4\34\1\2\4\0\1\34\1\2\1\34\1\2\1\0" +
            "\1\2\1\34\1\2\1\34\1\60\3\34\1\0\1\34" +
            "\1\0\32\34\1\146\1\34\1\2\4\0\1\34\1\2" +
            "\1\34\1\2\1\0\1\2\1\34\1\2\1\34\1\60" +
            "\3\34\1\0\1\34\1\0\1\34\1\147\32\34\1\2" +
            "\4\0\1\34\1\2\1\34\1\2\1\0\1\2\1\34" +
            "\1\2\1\34\1\60\3\34\1\0\1\150\1\0\34\34" +
            "\1\2\4\0\1\34\1\2\1\34\1\2\1\0\1\2" +
            "\1\34\1\2\1\34\1\60\3\34\1\0\1\34\1\0" +
            "\6\34\1\151\25\34\1\2\4\0\1\34\1\2\1\34" +
            "\1\2\1\0\1\2\1\34\1\2\1\34\1\60\3\34" +
            "\1\0\1\34\1\0\6\34\1\152\25\34\1\2\4\0" +
            "\1\34\1\2\1\34\1\2\1\0\1\2\1\34\1\2" +
            "\1\34\1\60\3\34\1\0\1\34\1\0\2\34\1\153" +
            "\31\34\1\2\4\0\1\34\1\2\1\34\1\2\1\0" +
            "\1\2\1\34\1\2\1\34\1\60\3\34\1\0\1\34" +
            "\1\0\1\34\1\154\32\34\1\2\4\0\1\34\1\2" +
            "\1\34\1\2\1\0\1\2\1\34\1\2\1\34\1\60" +
            "\3\34\1\0\1\34\1\0\11\34\1\155\22\34\1\2" +
            "\4\0\1\34\1\2\1\34\1\2\1\0\1\2\1\34" +
            "\1\156\1\34\1\60\3\34\1\0\1\34\1\0\34\34" +
            "\1\2\4\0\1\34\1\2\1\34\1\2\1\0\1\2" +
            "\1\34\1\2\1\34\1\60\3\34\1\0\1\34\1\0" +
            "\7\34\1\157\24\34\1\2\4\0\1\34\1\2\1\34" +
            "\1\2\1\0\1\2\1\34\1\2\1\34\1\60\3\34" +
            "\1\0\1\34\1\0\13\34\1\160\20\34\1\2\4\0" +
            "\1\34\1\2\1\34\1\2\1\0\1\2\1\34\1\2" +
            "\1\34\1\60\3\34\1\0\1\34\1\0\13\34\1\161" +
            "\20\34\1\2\4\0\1\34\1\2\1\34\1\2\1\0" +
            "\1\2\1\34\1\2\1\34\1\60\3\34\1\0\1\34" +
            "\1\0\15\34\1\162\16\34\1\2\4\0\1\34\1\2" +
            "\1\34\1\2\1\0\1\2\1\34\1\2\1\34\1\60" +
            "\3\34\1\0\1\34\1\0\27\34\1\163\4\34\1\2" +
            "\4\0\1\34\1\2\1\34\1\2\1\0\1\2\1\34" +
            "\1\2\1\34\1\60\3\34\1\0\1\34\1\0\1\34" +
            "\1\164\32\34\1\2\4\0\1\34\1\2\1\34\1\2" +
            "\1\0\1\2\1\34\1\165\1\34\1\60\3\34\1\0" +
            "\1\34\1\0\34\34\1\2\4\0\1\34\1\2\1\34" +
            "\1\2\1\0\1\2\1\34\1\2\1\34\1\60\3\34" +
            "\1\0\1\34\1\0\5\34\1\166\26\34\1\2\4\0" +
            "\1\34\1\2\1\34\1\2\1\0\1\2\1\34\1\167" +
            "\1\34\1\60\3\34\1\0\1\34\1\0\34\34\1\2" +
            "\4\0\1\34\1\2\1\34\1\2\1\0\1\2\1\34" +
            "\1\2\1\34\1\60\3\34\1\0\1\34\1\0\1\34" +
            "\1\170\32\34\1\2\4\0\1\34\1\2\1\34\1\2" +
            "\1\0\1\2\1\34\1\171\1\34\1\60\3\34\1\0" +
            "\1\34\1\0\34\34\1\2\4\0\1\34\1\2\1\34" +
            "\1\2\1\0\1\2\1\34\1\2\1\34\1\60\3\34" +
            "\1\0\1\34\1\0\6\34\1\172\25\34\1\2\4\0" +
            "\1\34\1\2\1\34\1\2\1\0\1\2\1\34\1\173" +
            "\1\34\1\60\3\34\1\0\1\34\1\0\34\34\1\2" +
            "\4\0\1\34\1\2\1\34\1\2\1\0\1\2\1\34" +
            "\1\2\1\34\1\60\3\34\1\0\1\34\1\0\1\34" +
            "\1\174\32\34\1\2\4\0\1\34\1\2\1\34\1\2" +
            "\1\0\1\2\1\34\1\2\1\34\1\60\3\34\1\0" +
            "\1\34\1\0\15\34\1\175\16\34\1\2\4\0\1\34" +
            "\1\2\1\34\1\2\1\0\1\2\1\34\1\176\1\34" +
            "\1\60\3\34\1\0\1\34\1\0\34\34";

  private static int [] zzUnpackTrans() {
      int[] result = new int[4900];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\1\1\1\11\2\1\1\11\3\1\1\11\6\1" +
            "\1\11\16\1\1\0\24\1\1\0\16\1\1\0\17\1" +
            "\1\0\52\1";

  private static int [] zzUnpackAttribute() {
      int[] result = new int[126];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _JBehaveLexer() {
      this(null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _JBehaveLexer(java.io.Reader in) {
      zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
      while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 9:
          { return JB_TOKEN_AT;
          }
          case 30:
              break;
        case 14: 
          { return JB_TOKEN_INJECT;
          }
          case 31:
              break;
          case 26:
          { return JB_TOKEN_EXAMPLES;
          }
          case 32:
              break;
          case 24:
          { return JB_TOKEN_BEFORE;
          }
          case 33:
              break;
          case 23:
          { return JB_TOKEN_IP;
          }
          case 34:
              break;
          case 10: {
              return JB_TOKEN_COMMA;
          }
          case 35:
              break;
          case 4:
          { return JB_TOKEN_NEWLINE;
          }
          case 36:
              break;
        case 17: 
          { return JB_TOKEN_THEN;
          }
          case 37:
              break;
        case 5: 
          { return JB_TOKEN_BRACKET_OPEN;
          }
          case 38:
              break;
          case 19:
          { return JB_TOKEN_USER_INJECT;
          }
          case 39:
              break;
          case 21:
          { return JB_TOKEN_GIVEN;
          }
          case 40:
              break;
          case 20:
          { return JB_TOKEN_META;
          }
          case 41:
              break;
          case 6:
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
          case 42:
              break;
        case 15: 
          { return JB_TOKEN_AND;
          }
          case 43:
              break;
        case 8: 
          { return JB_TOKEN_COLON;
          }
          case 44:
              break;
          case 27:
          { return JB_TOKEN_NARRATIVE;
          }
          case 45:
              break;
          case 25:
          { return JB_TOKEN_SCENARIO;
          }
          case 46:
              break;
          case 22:
          { return JB_TOKEN_AFTER;
          }
          case 47:
              break;
          case 11:
          { return JB_TOKEN_DBRACKET_OPEN;
          }
          case 48:
              break;
          case 3:
          { return JB_TOKEN_SPACE;
          }
          case 49:
              break;
          case 1:
          { return JB_TOKEN_WORD;
          }
          case 50:
              break;
          case 28:
          { return JB_TOKEN_LIFECYCLE;
          }
          case 51:
              break;
          case 2:
          { return JB_TOKEN_PIPE;
          }
          case 52:
              break;
        case 13: 
          { return JB_TOKEN_COMMENT;
          }
          case 53:
              break;
          case 12:
          { return JB_TOKEN_DBRACKET_CLOSE;
          }
          case 54:
              break;
          case 18:
          { return JB_TOKEN_PATH;
          }
          case 55:
              break;
          case 7:
          { return JB_TOKEN_BRACKET_CLOSE;
          }
          case 56:
              break;
          case 29:
          { return JB_TOKEN_GIVEN_STORIES;
          }
          case 57:
              break;
        case 16: 
          { return JB_TOKEN_WHEN;
          }
          case 58:
              break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
