/* The following code was generated by JFlex 1.4.3 on 07.04.15 14:03 */

package com.github.kumaraman21.intellijbehave.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.github.kumaraman21.intellijbehave.parser.IJBehaveElementType.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 07.04.15 14:03 from the specification file
 * <tt>C:/Users/debritod/Work/Intellij-Idea/IntelliJBehave/src/com/github/kumaraman21/intellijbehave/parser/_JBehaveLexer.flex</tt>
 */
public class _JBehaveLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\10\1\1\1\2\22\0\1\1\1\5\1\17"+
    "\1\17\1\17\1\17\1\17\1\17\1\17\1\17\1\17\1\17\1\0"+
    "\1\6\1\14\1\15\12\16\1\24\1\17\1\7\1\17\1\11\1\17"+
    "\1\13\1\42\1\54\2\12\1\44\1\12\1\35\4\12\1\51\1\20"+
    "\1\25\4\12\1\31\1\41\2\12\1\37\2\12\1\4\1\17\1\17"+
    "\1\17\1\17\1\12\1\17\1\23\1\12\1\32\1\43\1\21\1\52"+
    "\1\12\1\40\1\27\2\12\1\50\1\46\1\33\1\34\1\47\1\12"+
    "\1\26\1\36\1\22\1\12\1\30\1\12\1\45\1\53\1\12\1\17"+
    "\1\55\1\17\1\17\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\3\2\4\1\5\1\6\1\7"+
    "\1\1\3\4\1\10\11\4\1\11\1\0\2\4\1\0"+
    "\1\12\1\13\2\0\13\4\2\14\1\15\1\16\1\0"+
    "\1\16\1\0\6\4\1\17\4\4\1\16\1\0\4\4"+
    "\1\20\1\21\4\4\1\22\1\0\1\23\2\4\1\24"+
    "\4\4\1\0\3\4\1\25\3\4\1\26\5\4\1\27"+
    "\6\4\1\30\1\4\1\31\1\4\1\32\1\4\1\33"+
    "\2\4\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\56\0\270\0\346\0\270"+
    "\0\u0114\0\u0142\0\u0170\0\u0170\0\u019e\0\u01cc\0\u01fa\0\56"+
    "\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a"+
    "\0\u0398\0\56\0\u0170\0\u03c6\0\u03f4\0\u0422\0\u0450\0\56"+
    "\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0"+
    "\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730"+
    "\0\u0422\0\u075e\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844"+
    "\0\u0872\0\u08a0\0\270\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986"+
    "\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\270\0\270\0\u0a9a"+
    "\0\u0ac8\0\u0af6\0\u0b24\0\u0986\0\u0b52\0\56\0\u0b80\0\u0bae"+
    "\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e"+
    "\0\u0d4c\0\56\0\u0d7a\0\u0da8\0\u0dd6\0\u0cc2\0\u0e04\0\u0e32"+
    "\0\u0e60\0\u0e8e\0\u0ebc\0\56\0\u0eea\0\u0f18\0\u0f46\0\u0f74"+
    "\0\u0fa2\0\u0fd0\0\56\0\u0ffe\0\56\0\u102c\0\56\0\u105a"+
    "\0\56\0\u1088\0\u10b6\0\56";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\10\1\13\1\14\1\15\1\16\1\15"+
    "\1\17\3\10\1\20\1\21\3\10\1\22\3\10\1\23"+
    "\1\10\1\24\1\10\1\25\1\26\1\10\1\27\4\10"+
    "\1\30\2\10\1\31\1\32\57\0\1\3\1\4\2\5"+
    "\54\0\1\5\56\0\1\10\1\15\1\10\3\0\1\10"+
    "\2\33\1\34\1\10\1\15\4\10\1\0\30\10\5\0"+
    "\2\15\1\35\3\0\1\15\2\0\7\15\1\0\30\15"+
    "\1\0\1\36\3\0\3\36\1\37\1\0\45\36\11\0"+
    "\1\40\50\0\1\33\1\0\1\33\3\0\3\33\1\41"+
    "\1\33\1\0\4\33\1\0\30\33\5\0\3\15\3\0"+
    "\1\15\2\0\7\15\1\0\30\15\5\0\1\10\1\15"+
    "\1\10\3\0\1\10\1\33\1\42\1\34\1\16\1\15"+
    "\4\10\1\0\30\10\5\0\1\10\1\15\1\10\3\0"+
    "\1\10\2\33\1\34\1\10\1\15\1\10\1\43\2\10"+
    "\1\0\30\10\5\0\1\10\1\15\1\10\3\0\1\10"+
    "\2\33\1\34\1\10\1\15\3\10\1\44\1\0\30\10"+
    "\5\0\1\10\1\15\1\10\3\0\1\10\2\33\1\34"+
    "\1\10\1\15\4\10\1\0\5\10\1\45\22\10\5\0"+
    "\1\10\1\15\1\10\3\0\1\10\2\33\1\34\1\10"+
    "\1\15\4\10\1\0\2\10\1\46\25\10\5\0\1\10"+
    "\1\15\1\10\3\0\1\10\2\33\1\34\1\10\1\15"+
    "\4\10\1\0\13\10\1\47\14\10\5\0\1\10\1\15"+
    "\1\10\3\0\1\10\2\33\1\34\1\10\1\15\4\10"+
    "\1\0\13\10\1\50\14\10\5\0\1\10\1\15\1\10"+
    "\3\0\1\10\2\33\1\34\1\10\1\15\4\10\1\0"+
    "\6\10\1\51\16\10\1\52\2\10\5\0\1\10\1\15"+
    "\1\10\3\0\1\10\2\33\1\34\1\10\1\15\4\10"+
    "\1\0\20\10\1\53\7\10\5\0\1\10\1\15\1\10"+
    "\3\0\1\10\2\33\1\34\1\10\1\15\4\10\1\0"+
    "\2\10\1\54\25\10\5\0\1\10\1\15\1\10\3\0"+
    "\1\10\2\33\1\34\1\10\1\15\1\10\1\55\2\10"+
    "\1\0\30\10\5\0\1\56\1\15\1\56\3\0\1\56"+
    "\2\57\1\15\1\56\1\15\4\56\1\0\30\56\5\0"+
    "\2\15\1\60\3\0\1\15\2\0\7\15\1\0\30\15"+
    "\1\0\1\36\3\0\4\36\1\0\1\61\44\36\1\62"+
    "\3\0\4\62\1\0\1\63\44\62\4\0\1\57\1\0"+
    "\1\57\3\0\3\57\1\0\1\57\1\0\4\57\1\0"+
    "\30\57\5\0\1\33\1\0\1\33\3\0\3\33\1\41"+
    "\1\64\1\0\4\33\1\0\30\33\5\0\1\10\1\15"+
    "\1\10\3\0\1\10\2\33\1\34\1\10\1\15\2\10"+
    "\1\65\1\10\1\0\30\10\5\0\1\10\1\15\1\10"+
    "\3\0\1\10\2\33\1\34\1\10\1\15\4\10\1\0"+
    "\1\10\1\66\26\10\5\0\1\10\1\15\1\10\3\0"+
    "\1\10\2\33\1\34\1\10\1\15\1\10\1\67\2\10"+
    "\1\0\30\10\5\0\1\10\1\15\1\10\3\0\1\10"+
    "\2\33\1\34\1\10\1\15\4\10\1\0\3\10\1\70"+
    "\24\10\5\0\1\10\1\15\1\10\3\0\1\10\2\33"+
    "\1\34\1\10\1\15\1\10\1\71\2\10\1\0\30\10"+
    "\5\0\1\10\1\15\1\10\3\0\1\10\2\33\1\34"+
    "\1\10\1\15\1\10\1\72\2\10\1\0\30\10\5\0"+
    "\1\10\1\15\1\10\3\0\1\10\2\33\1\34\1\10"+
    "\1\15\4\10\1\0\16\10\1\73\11\10\5\0\1\10"+
    "\1\15\1\10\3\0\1\10\2\33\1\34\1\10\1\15"+
    "\2\10\1\74\1\10\1\0\30\10\5\0\1\10\1\15"+
    "\1\10\3\0\1\10\2\33\1\34\1\10\1\15\3\10"+
    "\1\75\1\0\30\10\5\0\1\10\1\15\1\10\3\0"+
    "\1\10\2\33\1\34\1\10\1\15\4\10\1\0\25\10"+
    "\1\76\2\10\5\0\1\10\1\15\1\10\3\0\1\10"+
    "\2\33\1\34\1\10\1\15\4\10\1\0\25\10\1\77"+
    "\2\10\5\0\1\56\1\15\1\56\3\0\1\56\2\57"+
    "\1\34\1\56\1\15\4\56\1\0\30\56\5\0\1\57"+
    "\1\0\1\57\3\0\3\57\1\41\1\57\1\0\4\57"+
    "\1\0\30\57\1\0\3\60\1\0\52\60\1\62\3\0"+
    "\4\62\1\0\1\100\44\62\4\0\1\33\1\0\1\33"+
    "\3\0\2\33\1\101\1\41\1\64\1\0\4\33\1\0"+
    "\30\33\5\0\1\10\1\15\1\10\3\0\1\10\2\33"+
    "\1\34\1\10\1\15\3\10\1\102\1\0\30\10\5\0"+
    "\1\10\1\15\1\10\3\0\1\10\2\33\1\34\1\10"+
    "\1\15\4\10\1\0\1\10\1\103\26\10\5\0\1\10"+
    "\1\15\1\10\3\0\1\10\2\33\1\34\1\10\1\15"+
    "\4\10\1\0\6\10\1\104\21\10\5\0\1\10\1\15"+
    "\1\10\3\0\1\10\2\33\1\34\1\10\1\15\1\10"+
    "\1\105\2\10\1\0\30\10\5\0\1\10\1\15\1\10"+
    "\3\0\1\10\2\33\1\34\1\10\1\15\4\10\1\0"+
    "\6\10\1\106\21\10\5\0\1\10\1\15\1\10\3\0"+
    "\1\10\2\33\1\34\1\10\1\15\4\10\1\0\6\10"+
    "\1\107\21\10\5\0\1\10\1\15\1\10\3\0\1\10"+
    "\2\33\1\34\1\10\1\15\1\10\1\110\2\10\1\0"+
    "\30\10\5\0\1\10\1\15\1\10\3\0\1\10\2\33"+
    "\1\34\1\10\1\15\4\10\1\0\21\10\1\111\6\10"+
    "\5\0\1\10\1\15\1\10\3\0\1\10\2\33\1\34"+
    "\1\10\1\15\1\10\1\112\2\10\1\0\30\10\5\0"+
    "\1\10\1\15\1\10\3\0\1\10\2\33\1\34\1\10"+
    "\1\15\4\10\1\0\7\10\1\113\20\10\1\0\1\62"+
    "\3\0\4\62\1\0\1\114\44\62\4\0\1\33\1\0"+
    "\1\33\3\0\3\33\1\41\1\115\1\0\4\33\1\0"+
    "\30\33\5\0\1\10\1\15\1\10\3\0\1\10\2\33"+
    "\1\34\1\10\1\15\4\10\1\116\30\10\5\0\1\10"+
    "\1\15\1\10\3\0\1\10\2\33\1\34\1\10\1\15"+
    "\3\10\1\117\1\0\30\10\5\0\1\10\1\15\1\10"+
    "\3\0\1\10\2\33\1\34\1\10\1\15\3\10\1\120"+
    "\1\0\30\10\5\0\1\10\1\15\1\10\3\0\1\10"+
    "\2\33\1\34\1\10\1\15\4\10\1\0\6\10\1\121"+
    "\21\10\5\0\1\10\1\15\1\10\3\0\1\10\2\33"+
    "\1\34\1\10\1\15\4\10\1\0\1\10\1\122\26\10"+
    "\5\0\1\10\1\15\1\10\3\0\1\10\2\33\1\34"+
    "\1\10\1\15\4\10\1\0\22\10\1\123\5\10\5\0"+
    "\1\10\1\15\1\10\3\0\1\10\2\33\1\34\1\10"+
    "\1\15\4\10\1\0\5\10\1\124\22\10\5\0\1\10"+
    "\1\15\1\10\3\0\1\10\2\33\1\34\1\10\1\15"+
    "\4\10\1\0\1\10\1\125\26\10\5\0\1\33\1\0"+
    "\1\33\3\0\2\33\1\126\1\41\1\115\1\0\4\33"+
    "\1\0\30\33\5\0\1\10\1\15\1\10\3\0\1\10"+
    "\2\33\1\34\1\10\1\15\2\10\1\127\1\10\1\0"+
    "\30\10\5\0\1\10\1\15\1\10\3\0\1\10\2\33"+
    "\1\34\1\10\1\15\4\10\1\0\1\10\1\130\26\10"+
    "\5\0\1\10\1\15\1\10\3\0\1\10\2\33\1\34"+
    "\1\10\1\15\4\10\1\0\4\10\1\131\23\10\5\0"+
    "\1\10\1\15\1\10\3\0\1\10\2\33\1\34\1\10"+
    "\1\15\4\10\1\132\30\10\5\0\1\10\1\15\1\10"+
    "\3\0\1\10\2\33\1\34\1\10\1\15\4\10\1\0"+
    "\23\10\1\133\4\10\5\0\1\10\1\15\1\10\3\0"+
    "\1\10\2\33\1\34\1\10\1\15\4\10\1\0\26\10"+
    "\1\134\1\10\5\0\1\10\1\15\1\10\3\0\1\10"+
    "\2\33\1\34\1\10\1\15\1\10\1\135\2\10\1\0"+
    "\30\10\5\0\1\33\1\0\1\33\3\0\3\33\1\41"+
    "\1\136\1\0\4\33\1\0\30\33\5\0\1\10\1\15"+
    "\1\10\3\0\1\10\2\33\1\34\1\10\1\15\4\10"+
    "\1\0\2\10\1\137\25\10\5\0\1\10\1\15\1\10"+
    "\3\0\1\10\2\33\1\34\1\10\1\15\4\10\1\0"+
    "\2\10\1\140\25\10\5\0\1\10\1\15\1\10\3\0"+
    "\1\10\2\33\1\34\1\10\1\15\2\10\1\141\1\10"+
    "\1\0\30\10\5\0\1\10\1\15\1\10\3\0\1\10"+
    "\2\33\1\34\1\10\1\15\1\10\1\142\2\10\1\0"+
    "\30\10\5\0\1\10\1\15\1\10\3\0\1\10\2\33"+
    "\1\34\1\10\1\15\4\10\1\0\5\10\1\143\22\10"+
    "\5\0\1\10\1\15\1\10\3\0\1\10\2\33\1\34"+
    "\1\10\1\15\4\10\1\144\30\10\5\0\1\10\1\15"+
    "\1\10\3\0\1\10\2\33\1\34\1\10\1\15\4\10"+
    "\1\0\3\10\1\145\24\10\5\0\1\10\1\15\1\10"+
    "\3\0\1\10\2\33\1\34\1\10\1\15\4\10\1\0"+
    "\7\10\1\146\20\10\5\0\1\10\1\15\1\10\3\0"+
    "\1\10\2\33\1\34\1\10\1\15\4\10\1\0\7\10"+
    "\1\147\20\10\5\0\1\10\1\15\1\10\3\0\1\10"+
    "\2\33\1\34\1\10\1\15\4\10\1\0\11\10\1\150"+
    "\16\10\5\0\1\10\1\15\1\10\3\0\1\10\2\33"+
    "\1\34\1\10\1\15\4\10\1\0\23\10\1\151\4\10"+
    "\5\0\1\10\1\15\1\10\3\0\1\10\2\33\1\34"+
    "\1\10\1\15\1\10\1\152\2\10\1\0\30\10\5\0"+
    "\1\10\1\15\1\10\3\0\1\10\2\33\1\34\1\10"+
    "\1\15\4\10\1\153\30\10\5\0\1\10\1\15\1\10"+
    "\3\0\1\10\2\33\1\34\1\10\1\15\4\10\1\0"+
    "\1\10\1\154\26\10\5\0\1\10\1\15\1\10\3\0"+
    "\1\10\2\33\1\34\1\10\1\15\4\10\1\155\30\10"+
    "\5\0\1\10\1\15\1\10\3\0\1\10\2\33\1\34"+
    "\1\10\1\15\1\10\1\156\2\10\1\0\30\10\5\0"+
    "\1\10\1\15\1\10\3\0\1\10\2\33\1\34\1\10"+
    "\1\15\4\10\1\157\30\10\5\0\1\10\1\15\1\10"+
    "\3\0\1\10\2\33\1\34\1\10\1\15\4\10\1\0"+
    "\2\10\1\160\25\10\5\0\1\10\1\15\1\10\3\0"+
    "\1\10\2\33\1\34\1\10\1\15\4\10\1\161\30\10"+
    "\5\0\1\10\1\15\1\10\3\0\1\10\2\33\1\34"+
    "\1\10\1\15\1\10\1\162\2\10\1\0\30\10\5\0"+
    "\1\10\1\15\1\10\3\0\1\10\2\33\1\34\1\10"+
    "\1\15\4\10\1\0\11\10\1\163\16\10\5\0\1\10"+
    "\1\15\1\10\3\0\1\10\2\33\1\34\1\10\1\15"+
    "\4\10\1\164\30\10\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4324];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\12\1\1\11\11\1\1\11"+
    "\1\0\2\1\1\0\1\1\1\11\2\0\17\1\1\0"+
    "\1\1\1\0\14\1\1\0\13\1\1\0\1\11\7\1"+
    "\1\0\3\1\1\11\11\1\1\11\6\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _JBehaveLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _JBehaveLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return JB_TOKEN_AT;
          }
        case 29: break;
        case 14: 
          { return JB_TOKEN_INJECT;
          }
        case 30: break;
        case 25: 
          { return JB_TOKEN_EXAMPLES;
          }
        case 31: break;
        case 23: 
          { return JB_TOKEN_BEFORE;
          }
        case 32: break;
        case 22: 
          { return JB_TOKEN_IP;
          }
        case 33: break;
        case 3: 
          { return JB_TOKEN_NEWLINE;
          }
        case 34: break;
        case 17: 
          { return JB_TOKEN_THEN;
          }
        case 35: break;
        case 5: 
          { return JB_TOKEN_BRACKET_OPEN;
          }
        case 36: break;
        case 18: 
          { return JB_TOKEN_USER_INJECT;
          }
        case 37: break;
        case 20: 
          { return JB_TOKEN_GIVEN;
          }
        case 38: break;
        case 19: 
          { return JB_TOKEN_META;
          }
        case 39: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 40: break;
        case 15: 
          { return JB_TOKEN_AND;
          }
        case 41: break;
        case 8: 
          { return JB_TOKEN_COLON;
          }
        case 42: break;
        case 26: 
          { return JB_TOKEN_NARRATIVE;
          }
        case 43: break;
        case 24: 
          { return JB_TOKEN_SCENARIO;
          }
        case 44: break;
        case 21: 
          { return JB_TOKEN_AFTER;
          }
        case 45: break;
        case 10: 
          { return JB_TOKEN_DBRACKET_OPEN;
          }
        case 46: break;
        case 2: 
          { return JB_TOKEN_SPACE;
          }
        case 47: break;
        case 4: 
          { return JB_TOKEN_WORD;
          }
        case 48: break;
        case 27: 
          { return JB_TOKEN_LIFECYCLE;
          }
        case 49: break;
        case 9: 
          { return JB_TOKEN_PIPE;
          }
        case 50: break;
        case 13: 
          { return JB_TOKEN_COMMENT;
          }
        case 51: break;
        case 11: 
          { return JB_TOKEN_DBRACKET_CLOSE;
          }
        case 52: break;
        case 12: 
          { return JB_TOKEN_PATH;
          }
        case 53: break;
        case 6: 
          { return JB_TOKEN_BRACKET_CLOSE;
          }
        case 54: break;
        case 28: 
          { return JB_TOKEN_GIVEN_STORIES;
          }
        case 55: break;
        case 16: 
          { return JB_TOKEN_WHEN;
          }
        case 56: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
