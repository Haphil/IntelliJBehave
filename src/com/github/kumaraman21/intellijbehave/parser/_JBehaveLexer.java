/* The following code was generated by JFlex 1.4.3 on 23.04.15 11:07 */

package com.github.kumaraman21.intellijbehave.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.github.kumaraman21.intellijbehave.parser.IJBehaveElementType.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23.04.15 11:07 from the specification file
 * <tt>C:/Users/debritod/Work/Intellij-Idea/IntelliJBehave/src/com/github/kumaraman21/intellijbehave/parser/_JBehaveLexer.flex</tt>
 */
public class _JBehaveLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = "\11\0\1\11\1\3\1\10\1\11\1\2\22\0\1\1\1\5\12\0" +
          "\1\25\1\6\1\23\1\17\12\24\1\15\1\0\1\7\1\0\1\12" +
          "\1\0\1\22\1\47\1\61\2\14\1\51\1\14\1\42\4\14\1\56" +
          "\1\26\1\32\4\14\1\36\1\46\2\14\1\44\2\14\1\4\1\0" +
          "\1\20\2\0\1\21\1\0\1\31\1\16\1\37\1\50\1\27\1\57" +
          "\1\16\1\45\1\34\2\16\1\55\1\53\1\40\1\41\1\54\1\16" +
          "\1\33\1\43\1\30\1\16\1\35\1\16\1\52\1\60\1\16\1\0" +
          "\1\13\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 = "\1\0\1\1\1\2\3\3\1\1\1\4\1\5\1\6" +
          "\1\7\1\1\1\10\1\1\1\5\1\1\1\11\14\1" +
          "\2\0\2\1\2\0\1\12\1\1\1\13\1\14\17\1" +
          "\5\0\1\15\2\16\1\0\1\1\1\0\10\1\1\17" +
          "\4\1\1\0\3\1\3\0\3\1\3\0\1\1\1\0" +
          "\5\1\1\20\1\21\4\1\4\22\1\1\1\0\1\1" +
          "\2\0\2\1\2\0\2\23\1\1\1\24\2\1\1\25" +
          "\5\1\2\0\2\1\4\0\3\1\2\0\4\1\1\26" +
          "\3\1\2\22\1\1\2\22\1\0\4\22\1\1\2\0" +
          "\4\22\1\1\1\0\1\27\5\1\1\30\2\0\1\1" +
          "\1\0\5\1\2\22\1\1\1\31\1\1\1\32\1\1" +
          "\1\33\1\1\1\34\2\1\1\35";

  private static int [] zzUnpackAction() {
    int[] result = new int[198];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e" +
          "\0\310\0\u0190\0\310\0\372\0\310\0\u01c2\0\u01f4\0\u0226" +
          "\0\310\0\u0258\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384" +
          "\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514" +
          "\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\62\0\u01f4\0\u0640" +
          "\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0" +
          "\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960" +
          "\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0a8c\0\u0abe" +
          "\0\u0af0\0\u0a5a\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c" +
          "\0\u0c4e\0\u044c\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a" +
          "\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a" +
          "\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a" +
          "\0\u10cc\0\u10fe\0\u044c\0\u044c\0\u1130\0\u1162\0\u1194\0\u11c6" +
          "\0\u0d48\0\u09f6\0\u0d7a\0\u08ca\0\u11f8\0\u122a\0\u125c\0\u128e" +
          "\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u0a5a\0\u0a8c\0\u13ba" +
          "\0\310\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518" +
          "\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8" +
          "\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838" +
          "\0\u186a\0\u189c\0\310\0\u18ce\0\u1900\0\u1932\0\u154a\0\u1964" +
          "\0\u1964\0\u157c\0\u1996\0\u1996\0\u15ae\0\u128e\0\u15e0\0\u125c" +
          "\0\u19c8\0\u19fa\0\u1a2c\0\u16da\0\u1356\0\u170c\0\u12f2\0\u1a5e" +
          "\0\u1a90\0\u1806\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\310" +
          "\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a" +
          "\0\u1d4c\0\u1bbc\0\u1a2c\0\u1d7e\0\310\0\u1db0\0\310\0\u1de2" +
          "\0\310\0\u1e14\0\310\0\u1e46\0\u1e78\0\310";

  private static int [] zzUnpackRowMap() {
    int[] result = new int[198];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 = "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10" +
          "\1\11\1\3\1\12\1\13\1\14\1\15\3\16\1\2" +
          "\1\17\1\2\1\20\1\21\1\22\3\16\1\23\3\16" +
          "\1\24\3\16\1\25\1\16\1\26\1\16\1\27\1\30" +
          "\1\16\1\31\4\16\1\32\2\16\1\33\1\2\3\0" +
          "\4\2\2\0\1\2\1\0\1\2\1\0\4\2\1\0" +
          "\2\2\1\0\34\2\1\0\1\3\1\4\2\5\4\0" +
          "\1\3\53\0\1\5\140\0\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\2\0\1\2\1\0\1\34\1\36\1\34" +
          "\2\2\1\34\1\37\2\34\1\0\34\34\1\2\3\0" +
          "\2\2\1\40\1\2\2\0\1\2\1\0\1\2\1\0" +
          "\4\2\1\0\2\2\1\0\34\2\1\41\1\42\1\43" +
          "\1\0\3\41\1\44\2\43\1\45\1\42\1\41\1\42" +
          "\4\41\1\42\2\41\1\42\34\41\1\2\3\0\4\2" +
          "\2\0\1\46\1\0\1\2\1\0\4\2\1\0\2\2" +
          "\1\0\35\2\3\0\1\34\1\2\1\34\1\35\2\0" +
          "\1\2\1\0\1\34\1\0\1\34\2\2\1\34\1\37" +
          "\2\34\1\0\34\34\1\47\3\0\3\47\5\0\46\47" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\2\0\1\2" +
          "\1\0\1\34\1\0\1\34\2\2\1\34\1\37\1\50" +
          "\1\51\1\0\34\34\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\2\0\1\2\1\0\1\34\1\36\1\34\2\2" +
          "\1\34\1\37\2\34\1\0\1\34\1\52\32\34\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\2\0\1\2\1\0" +
          "\1\34\1\36\1\34\2\2\1\34\1\37\2\34\1\0" +
          "\3\34\1\53\30\34\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\2\0\1\2\1\0\1\34\1\36\1\34\2\2" +
          "\1\34\1\37\2\34\1\0\11\34\1\54\22\34\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\2\0\1\2\1\0" +
          "\1\34\1\36\1\34\2\2\1\34\1\37\2\34\1\0" +
          "\6\34\1\55\25\34\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\2\0\1\2\1\0\1\34\1\36\1\34\2\2" +
          "\1\34\1\37\2\34\1\0\17\34\1\56\14\34\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\2\0\1\2\1\0" +
          "\1\34\1\36\1\34\2\2\1\34\1\37\2\34\1\0" +
          "\17\34\1\57\14\34\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\2\0\1\2\1\0\1\34\1\36\1\34\2\2" +
          "\1\34\1\37\2\34\1\0\12\34\1\60\16\34\1\61" +
          "\2\34\1\2\3\0\1\34\1\2\1\34\1\35\2\0" +
          "\1\2\1\0\1\34\1\36\1\34\2\2\1\34\1\37" +
          "\2\34\1\0\24\34\1\62\7\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\2\0\1\2\1\0\1\34\1\36" +
          "\1\34\2\2\1\34\1\37\2\34\1\0\6\34\1\63" +
          "\25\34\1\2\3\0\1\34\1\2\1\34\1\35\2\0" +
          "\1\2\1\0\1\34\1\36\1\34\2\2\1\34\1\37" +
          "\2\34\1\0\1\34\1\64\32\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\2\0\1\2\1\0\1\34\1\0" +
          "\1\34\2\65\1\34\1\37\2\34\1\0\34\34\1\66" +
          "\2\67\1\0\4\66\2\67\1\66\1\67\1\66\1\67" +
          "\4\66\1\67\2\66\1\67\34\66\4\0\1\70\2\0" +
          "\1\71\4\0\1\70\1\0\3\70\3\0\1\70\1\0" +
          "\34\70\4\0\1\37\1\0\1\37\1\72\4\0\1\37" +
          "\1\0\1\37\2\73\4\37\1\0\34\37\1\2\3\0" +
          "\2\2\1\74\1\2\2\0\1\2\1\0\1\2\1\0" +
          "\4\2\1\0\2\2\1\0\34\2\1\41\1\42\1\43" +
          "\1\0\3\41\1\45\2\43\1\75\1\42\1\41\1\42" +
          "\4\41\1\42\2\41\1\42\34\41\2\42\1\43\1\0" +
          "\3\42\3\43\1\76\47\42\3\43\1\0\6\43\1\77" +
          "\47\43\1\100\1\101\1\43\1\0\3\100\1\45\2\43" +
          "\1\102\1\101\1\100\1\101\4\100\1\101\2\100\1\101" +
          "\34\100\1\45\2\43\1\0\4\45\2\43\1\102\1\43" +
          "\1\45\1\43\4\45\1\43\2\45\1\43\34\45\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\2\0\1\2\1\0" +
          "\1\34\1\0\1\34\2\65\1\34\1\37\1\34\1\103" +
          "\1\0\34\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\2\0\1\2\1\0\1\34\1\0\1\34\2\65\1\34" +
          "\1\37\1\50\1\51\1\0\34\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\2\0\1\2\1\0\1\34\1\0" +
          "\1\34\2\65\1\34\1\37\2\34\1\0\2\34\1\104" +
          "\31\34\1\2\3\0\1\34\1\2\1\34\1\35\2\0" +
          "\1\2\1\0\1\34\1\0\1\34\2\65\1\34\1\37" +
          "\2\34\1\0\5\34\1\105\26\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\2\0\1\2\1\0\1\34\1\0" +
          "\1\34\2\65\1\34\1\37\2\34\1\0\1\34\1\106" +
          "\32\34\1\2\3\0\1\34\1\2\1\34\1\35\2\0" +
          "\1\2\1\0\1\34\1\0\1\34\2\65\1\34\1\37" +
          "\2\34\1\0\7\34\1\107\24\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\2\0\1\2\1\0\1\34\1\0" +
          "\1\34\2\65\1\34\1\37\2\34\1\0\1\34\1\110" +
          "\32\34\1\2\3\0\1\34\1\2\1\34\1\35\2\0" +
          "\1\2\1\0\1\34\1\0\1\34\2\65\1\34\1\37" +
          "\2\34\1\0\1\34\1\111\32\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\2\0\1\2\1\0\1\34\1\0" +
          "\1\34\2\65\1\34\1\37\2\34\1\0\22\34\1\112" +
          "\11\34\1\2\3\0\1\34\1\2\1\34\1\35\2\0" +
          "\1\2\1\0\1\34\1\0\1\34\2\65\1\34\1\37" +
          "\2\34\1\0\2\34\1\113\31\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\2\0\1\2\1\0\1\34\1\0" +
          "\1\34\2\65\1\34\1\37\2\34\1\0\3\34\1\114" +
          "\30\34\1\2\3\0\1\34\1\2\1\34\1\35\2\0" +
          "\1\2\1\0\1\34\1\0\1\34\2\65\1\34\1\37" +
          "\2\34\1\0\31\34\1\115\2\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\2\0\1\2\1\0\1\34\1\0" +
          "\1\34\2\65\1\34\1\37\2\34\1\0\31\34\1\116" +
          "\2\34\1\2\1\117\2\0\1\120\1\2\1\120\1\121" +
          "\2\0\1\2\1\0\1\120\1\0\1\120\2\2\1\120" +
          "\1\117\2\120\1\0\34\120\1\66\2\67\1\0\4\66" +
          "\2\67\1\122\1\67\1\66\1\67\4\66\1\67\2\66" +
          "\1\67\34\66\3\67\1\0\6\67\1\123\47\67\4\0" +
          "\1\37\1\0\1\37\1\72\4\0\1\37\1\0\1\37" +
          "\2\0\4\37\1\0\34\37\3\124\1\0\56\124\3\67" +
          "\1\0\56\67\1\0\1\117\2\0\1\117\1\0\1\117" +
          "\1\125\4\0\1\117\1\0\1\117\2\0\4\117\1\0" +
          "\34\117\3\74\1\0\56\74\1\45\2\43\1\0\1\126" +
          "\1\45\1\126\1\127\2\43\1\102\1\43\1\126\1\43" +
          "\1\126\2\130\1\126\1\131\2\126\1\43\34\126\3\43" +
          "\1\0\1\131\1\43\1\131\1\132\2\43\1\77\1\43" +
          "\1\131\1\43\1\131\2\133\4\131\1\43\34\131\1\100" +
          "\1\101\1\43\1\0\3\100\1\45\2\43\1\134\1\101" +
          "\1\100\1\101\4\100\1\101\2\100\1\101\34\100\2\101" +
          "\1\43\1\0\3\101\3\43\1\135\47\101\1\2\3\0" +
          "\1\34\1\2\1\34\1\35\2\0\1\2\1\0\1\34" +
          "\1\0\1\34\2\65\1\34\1\37\1\136\1\103\1\0" +
          "\34\34\1\2\3\0\1\34\1\2\1\34\1\35\2\0" +
          "\1\2\1\0\1\34\1\0\1\34\2\65\1\34\1\37" +
          "\2\34\1\0\3\34\1\137\30\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\2\0\1\2\1\0\1\34\1\0" +
          "\1\34\2\65\1\34\1\37\2\34\1\0\5\34\1\140" +
          "\26\34\1\2\3\0\1\34\1\2\1\34\1\35\2\0" +
          "\1\2\1\0\1\34\1\0\1\34\2\65\1\34\1\37" +
          "\2\34\1\0\12\34\1\141\21\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\2\0\1\2\1\0\1\34\1\0" +
          "\1\34\2\65\1\34\1\37\2\34\1\0\1\34\1\142" +
          "\32\34\1\2\3\0\1\34\1\2\1\34\1\35\2\0" +
          "\1\2\1\0\1\34\1\0\1\34\2\65\1\34\1\37" +
          "\2\34\1\0\12\34\1\143\21\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\2\0\1\2\1\0\1\34\1\0" +
          "\1\34\2\65\1\34\1\37\2\34\1\0\12\34\1\144" +
          "\21\34\1\2\3\0\1\34\1\2\1\34\1\35\2\0" +
          "\1\2\1\0\1\34\1\0\1\34\2\65\1\34\1\37" +
          "\2\34\1\0\1\34\1\145\32\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\2\0\1\2\1\0\1\34\1\0" +
          "\1\34\2\65\1\34\1\37\2\34\1\0\25\34\1\146" +
          "\6\34\1\2\3\0\1\34\1\2\1\34\1\35\2\0" +
          "\1\2\1\0\1\34\1\0\1\34\2\65\1\34\1\37" +
          "\2\34\1\0\1\34\1\147\32\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\2\0\1\2\1\0\1\34\1\0" +
          "\1\34\2\65\1\34\1\37\2\34\1\0\13\34\1\150" +
          "\20\34\1\0\1\117\2\0\1\151\1\0\1\151\1\125" +
          "\4\0\1\151\1\0\1\151\1\152\1\73\4\151\1\0" +
          "\34\151\1\2\1\117\2\0\1\153\1\2\1\153\1\121" +
          "\2\0\1\2\1\0\1\153\1\0\1\153\1\154\1\65" +
          "\1\153\1\151\2\153\1\0\34\153\1\155\2\156\1\0" +
          "\4\155\2\156\1\155\1\156\1\155\1\156\4\155\1\156" +
          "\2\155\1\156\34\155\1\66\2\67\1\0\1\122\1\66" +
          "\1\122\1\66\2\67\1\122\1\67\1\122\1\67\1\122" +
          "\2\157\1\122\1\123\2\122\1\67\34\122\3\67\1\0" +
          "\1\123\1\67\1\123\3\67\1\123\1\67\1\123\1\67" +
          "\1\123\2\160\4\123\1\67\34\123\3\124\1\0\6\124" +
          "\1\161\47\124\3\156\1\0\56\156\1\45\2\43\1\0" +
          "\1\126\1\45\1\126\1\127\2\43\1\102\1\43\1\126" +
          "\1\43\1\126\2\162\1\126\1\131\2\126\1\43\34\126" +
          "\1\66\2\67\1\0\4\66\2\67\1\163\1\67\1\66" +
          "\1\67\4\66\1\67\2\66\1\67\34\66\1\45\2\43" +
          "\1\0\1\126\1\45\1\126\1\127\2\43\1\102\1\43" +
          "\1\126\1\43\1\126\2\45\1\126\1\131\2\126\1\43" +
          "\34\126\3\43\1\0\1\131\1\43\1\131\1\132\2\43" +
          "\1\77\1\43\1\131\1\43\1\131\2\164\4\131\1\43" +
          "\34\131\3\67\1\0\6\67\1\165\47\67\3\43\1\0" +
          "\1\131\1\43\1\131\1\132\2\43\1\77\1\43\1\131" +
          "\1\43\1\131\2\43\4\131\1\43\34\131\1\45\2\43" +
          "\1\0\1\126\1\45\1\126\1\127\2\43\1\166\1\43" +
          "\1\126\1\43\1\126\2\130\1\126\1\131\2\126\1\43" +
          "\34\126\3\43\1\0\1\131\1\43\1\131\1\132\2\43" +
          "\1\167\1\43\1\131\1\43\1\131\2\133\4\131\1\43" +
          "\34\131\1\2\3\0\1\34\1\2\1\34\1\35\2\0" +
          "\1\2\1\0\1\34\1\0\1\34\2\65\1\34\1\37" +
          "\1\34\1\170\1\0\34\34\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\2\0\1\2\1\0\1\34\1\171\1\34" +
          "\2\65\1\34\1\37\2\34\1\0\34\34\1\2\3\0" +
          "\1\34\1\2\1\34\1\35\2\0\1\2\1\0\1\34" +
          "\1\0\1\34\2\65\1\34\1\37\2\34\1\0\3\34" +
          "\1\172\30\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\2\0\1\2\1\0\1\34\1\0\1\34\2\65\1\34" +
          "\1\37\2\34\1\0\3\34\1\173\30\34\1\2\3\0" +
          "\1\34\1\2\1\34\1\35\2\0\1\2\1\0\1\34" +
          "\1\0\1\34\2\65\1\34\1\37\2\34\1\0\12\34" +
          "\1\174\21\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\2\0\1\2\1\0\1\34\1\0\1\34\2\65\1\34" +
          "\1\37\2\34\1\0\5\34\1\175\26\34\1\2\3\0" +
          "\1\34\1\2\1\34\1\35\2\0\1\2\1\0\1\34" +
          "\1\0\1\34\2\65\1\34\1\37\2\34\1\0\26\34" +
          "\1\176\5\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\2\0\1\2\1\0\1\34\1\0\1\34\2\65\1\34" +
          "\1\37\2\34\1\0\11\34\1\177\22\34\1\2\3\0" +
          "\1\34\1\2\1\34\1\35\2\0\1\2\1\0\1\34" +
          "\1\0\1\34\2\65\1\34\1\37\2\34\1\0\5\34" +
          "\1\200\26\34\1\155\2\156\1\0\4\155\2\156\1\201" +
          "\1\156\1\155\1\156\4\155\1\156\2\155\1\156\34\155" +
          "\3\156\1\0\6\156\1\202\47\156\1\66\1\203\1\67" +
          "\1\0\1\204\1\66\1\204\1\205\2\67\1\122\1\67" +
          "\1\204\1\67\1\204\2\66\1\204\1\203\2\204\1\67" +
          "\34\204\1\67\1\203\1\67\1\0\1\203\1\67\1\203" +
          "\1\206\2\67\1\123\1\67\1\203\1\67\1\203\2\67" +
          "\4\203\1\67\34\203\3\124\1\0\1\207\1\124\1\207" +
          "\1\210\2\124\1\161\1\124\1\207\1\124\1\207\2\124" +
          "\4\207\1\124\34\207\1\45\1\211\1\43\1\0\1\212" +
          "\1\45\1\212\1\213\2\43\1\102\1\43\1\212\1\43" +
          "\1\212\2\45\1\212\1\211\2\212\1\43\34\212\1\66" +
          "\2\67\1\0\1\122\1\66\1\122\1\66\2\67\1\122" +
          "\1\67\1\122\1\67\1\122\2\214\1\122\1\123\2\122" +
          "\1\67\34\122\1\43\1\211\1\43\1\0\1\211\1\43" +
          "\1\211\1\215\2\43\1\77\1\43\1\211\1\43\1\211" +
          "\2\43\4\211\1\43\34\211\3\67\1\0\1\123\1\67" +
          "\1\123\3\67\1\123\1\67\1\123\1\67\1\123\2\216" +
          "\4\123\1\67\34\123\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\2\0\1\2\1\0\1\34\1\0\1\34\2\65" +
          "\1\34\1\37\1\217\1\170\1\0\34\34\1\2\3\0" +
          "\1\34\1\2\1\34\1\35\2\0\1\2\1\0\1\34" +
          "\1\0\1\34\2\65\1\34\1\37\2\34\1\0\2\34" +
          "\1\220\31\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\2\0\1\2\1\0\1\34\1\0\1\34\2\65\1\34" +
          "\1\37\2\34\1\0\5\34\1\221\26\34\1\2\3\0" +
          "\1\34\1\2\1\34\1\35\2\0\1\2\1\0\1\34" +
          "\1\0\1\34\2\65\1\34\1\37\2\34\1\0\10\34" +
          "\1\222\23\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\2\0\1\2\1\0\1\34\1\223\1\34\2\65\1\34" +
          "\1\37\2\34\1\0\34\34\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\2\0\1\2\1\0\1\34\1\0\1\34" +
          "\2\65\1\34\1\37\2\34\1\0\27\34\1\224\4\34" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\2\0\1\2" +
          "\1\0\1\34\1\0\1\34\2\65\1\34\1\37\2\34" +
          "\1\0\32\34\1\225\1\34\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\2\0\1\2\1\0\1\34\1\0\1\34" +
          "\2\65\1\34\1\37\2\34\1\0\1\34\1\226\32\34" +
          "\1\155\1\202\1\156\1\0\1\227\1\155\1\227\1\155" +
          "\2\156\1\201\1\156\1\227\1\156\1\227\1\230\1\231" +
          "\1\227\1\232\2\227\1\156\34\227\1\156\1\202\1\156" +
          "\1\0\1\232\1\156\1\232\3\156\1\202\1\156\1\232" +
          "\1\156\1\232\1\233\1\234\4\232\1\156\34\232\1\67" +
          "\1\203\1\67\1\0\1\235\1\67\1\235\1\206\2\67" +
          "\1\123\1\67\1\235\1\67\1\235\1\236\1\160\4\235" +
          "\1\67\34\235\1\66\1\203\1\67\1\0\1\237\1\66" +
          "\1\237\1\205\2\67\1\122\1\67\1\237\1\67\1\237" +
          "\1\240\1\157\1\237\1\235\2\237\1\67\34\237\1\155" +
          "\2\156\1\0\4\155\2\156\1\241\1\156\1\155\1\156" +
          "\4\155\1\156\2\155\1\156\34\155\3\156\1\0\6\156" +
          "\1\242\47\156\3\124\1\0\1\207\1\124\1\207\1\210" +
          "\2\124\1\161\1\124\1\207\1\124\1\207\2\243\4\207" +
          "\1\124\34\207\3\67\1\0\6\67\1\216\47\67\1\43" +
          "\1\211\1\43\1\0\1\244\1\43\1\244\1\215\2\43" +
          "\1\77\1\43\1\244\1\43\1\244\1\245\1\164\4\244" +
          "\1\43\34\244\1\45\1\211\1\43\1\0\1\246\1\45" +
          "\1\246\1\213\2\43\1\102\1\43\1\246\1\43\1\246" +
          "\1\247\1\162\1\246\1\244\2\246\1\43\34\246\1\155" +
          "\2\156\1\0\4\155\2\156\1\250\1\156\1\155\1\156" +
          "\4\155\1\156\2\155\1\156\34\155\1\66\2\67\1\0" +
          "\1\122\1\66\1\122\1\66\2\67\1\122\1\67\1\122" +
          "\1\67\1\122\2\66\1\122\1\123\2\122\1\67\34\122" +
          "\3\156\1\0\6\156\1\251\47\156\3\67\1\0\1\123" +
          "\1\67\1\123\3\67\1\123\1\67\1\123\1\67\1\123" +
          "\2\67\4\123\1\67\34\123\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\2\0\1\2\1\0\1\34\1\0\1\34" +
          "\2\65\1\34\1\37\1\34\1\252\1\0\34\34\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\2\0\1\2\1\0" +
          "\1\34\1\0\1\34\2\65\1\34\1\37\2\34\1\0" +
          "\6\34\1\253\25\34\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\2\0\1\2\1\0\1\34\1\0\1\34\2\65" +
          "\1\34\1\37\2\34\1\0\6\34\1\254\25\34\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\2\0\1\2\1\0" +
          "\1\34\1\0\1\34\2\65\1\34\1\37\2\34\1\0" +
          "\2\34\1\255\31\34\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\2\0\1\2\1\0\1\34\1\0\1\34\2\65" +
          "\1\34\1\37\2\34\1\0\1\34\1\256\32\34\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\2\0\1\2\1\0" +
          "\1\34\1\0\1\34\2\65\1\34\1\37\2\34\1\0" +
          "\11\34\1\257\22\34\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\2\0\1\2\1\0\1\34\1\260\1\34\2\65" +
          "\1\34\1\37\2\34\1\0\34\34\1\155\1\202\1\156" +
          "\1\0\1\201\1\155\1\201\1\155\2\156\1\201\1\156" +
          "\1\201\1\156\1\201\2\155\1\201\1\202\2\201\1\156" +
          "\34\201\1\156\1\202\1\156\1\0\1\202\1\156\1\202" +
          "\3\156\1\202\1\156\1\202\1\156\1\202\2\156\4\202" +
          "\1\156\34\202\1\155\2\156\1\0\1\241\1\155\1\241" +
          "\1\155\2\156\1\201\1\156\1\241\1\156\1\241\2\231" +
          "\1\241\1\242\2\241\1\156\34\241\3\156\1\0\1\242" +
          "\1\156\1\242\3\156\1\202\1\156\1\242\1\156\1\242" +
          "\2\234\4\242\1\156\34\242\1\124\1\261\1\124\1\0" +
          "\1\261\1\124\1\261\1\262\2\124\1\161\1\124\1\261" +
          "\1\124\1\261\2\124\4\261\1\124\34\261\1\155\2\156" +
          "\1\0\1\241\1\155\1\241\1\155\2\156\1\201\1\156" +
          "\1\241\1\156\1\241\2\263\1\241\1\242\2\241\1\156" +
          "\34\241\3\156\1\0\1\242\1\156\1\242\3\156\1\202" +
          "\1\156\1\242\1\156\1\242\2\264\4\242\1\156\34\242" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\2\0\1\2" +
          "\1\0\1\34\1\0\1\34\2\65\1\34\1\37\2\34" +
          "\1\0\7\34\1\265\24\34\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\2\0\1\2\1\0\1\34\1\0\1\34" +
          "\2\65\1\34\1\37\2\34\1\0\13\34\1\266\20\34" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\2\0\1\2" +
          "\1\0\1\34\1\0\1\34\2\65\1\34\1\37\2\34" +
          "\1\0\13\34\1\267\20\34\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\2\0\1\2\1\0\1\34\1\0\1\34" +
          "\2\65\1\34\1\37\2\34\1\0\15\34\1\270\16\34" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\2\0\1\2" +
          "\1\0\1\34\1\0\1\34\2\65\1\34\1\37\2\34" +
          "\1\0\27\34\1\271\4\34\1\124\1\261\1\124\1\0" +
          "\1\272\1\124\1\272\1\262\2\124\1\161\1\124\1\272" +
          "\1\124\1\272\1\273\1\243\4\272\1\124\34\272\3\156" +
          "\1\0\6\156\1\264\47\156\1\155\2\156\1\0\1\241" +
          "\1\155\1\241\1\155\2\156\1\201\1\156\1\241\1\156" +
          "\1\241\2\155\1\241\1\242\2\241\1\156\34\241\3\156" +
          "\1\0\1\242\1\156\1\242\3\156\1\202\1\156\1\242" +
          "\1\156\1\242\2\156\4\242\1\156\34\242\1\2\3\0" +
          "\1\34\1\2\1\34\1\35\2\0\1\2\1\0\1\34" +
          "\1\0\1\34\2\65\1\34\1\37\2\34\1\0\1\34" +
          "\1\274\32\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\2\0\1\2\1\0\1\34\1\275\1\34\2\65\1\34" +
          "\1\37\2\34\1\0\34\34\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\2\0\1\2\1\0\1\34\1\0\1\34" +
          "\2\65\1\34\1\37\2\34\1\0\5\34\1\276\26\34" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\2\0\1\2" +
          "\1\0\1\34\1\277\1\34\2\65\1\34\1\37\2\34" +
          "\1\0\34\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\2\0\1\2\1\0\1\34\1\0\1\34\2\65\1\34" +
          "\1\37\2\34\1\0\1\34\1\300\32\34\1\2\3\0" +
          "\1\34\1\2\1\34\1\35\2\0\1\2\1\0\1\34" +
          "\1\301\1\34\2\65\1\34\1\37\2\34\1\0\34\34" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\2\0\1\2" +
          "\1\0\1\34\1\0\1\34\2\65\1\34\1\37\2\34" +
          "\1\0\6\34\1\302\25\34\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\2\0\1\2\1\0\1\34\1\303\1\34" +
          "\2\65\1\34\1\37\2\34\1\0\34\34\1\2\3\0" +
          "\1\34\1\2\1\34\1\35\2\0\1\2\1\0\1\34" +
          "\1\0\1\34\2\65\1\34\1\37\2\34\1\0\1\34" +
          "\1\304\32\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\2\0\1\2\1\0\1\34\1\0\1\34\2\65\1\34" +
          "\1\37\2\34\1\0\15\34\1\305\16\34\1\2\3\0" +
          "\1\34\1\2\1\34\1\35\2\0\1\2\1\0\1\34" +
          "\1\306\1\34\2\65\1\34\1\37\2\34\1\0\34\34";

  private static int [] zzUnpackTrans() {
    int[] result = new int[7850];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\3\1\1\11\3\1\1\11\1\1\1\11\1\1" +
          "\1\11\3\1\1\11\14\1\2\0\2\1\2\0\23\1" +
          "\5\0\3\1\1\0\1\1\1\0\15\1\1\0\3\1" +
          "\3\0\3\1\3\0\1\1\1\0\20\1\1\0\1\1" +
          "\2\0\2\1\2\0\3\1\1\11\10\1\2\0\2\1" +
          "\4\0\3\1\2\0\4\1\1\11\10\1\1\0\5\1" +
          "\2\0\5\1\1\0\6\1\1\11\2\0\1\1\1\0" +
          "\10\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11" +
          "\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int[] result = new int[198];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _JBehaveLexer() {
    this(null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _JBehaveLexer(java.io.Reader in) {
    zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: {
          return JB_TOKEN_MKEY;
          }
        case 30:
          break;
        case 14: 
          { return JB_TOKEN_INJECT;
          }
        case 31:
          break;
        case 26: 
          { return JB_TOKEN_EXAMPLES;
          }
        case 32:
          break;
        case 24: 
          { return JB_TOKEN_BEFORE;
          }
        case 33:
          break;
        case 23: 
          { return JB_TOKEN_IP;
          }
        case 34:
          break;
        case 9: {
          return JB_TOKEN_COMMA;
          }
        case 35:
          break;
        case 3: 
          { return JB_TOKEN_NEWLINE;
          }
        case 36:
          break;
        case 17: 
          { return JB_TOKEN_THEN;
          }
        case 37:
          break;
        case 4: 
          { return JB_TOKEN_BRACKET_OPEN;
          }
        case 38:
          break;
        case 19: 
          { return JB_TOKEN_USER_INJECT;
          }
        case 39:
          break;
        case 21: 
          { return JB_TOKEN_GIVEN;
          }
        case 40:
          break;
        case 20: 
          { return JB_TOKEN_META;
          }
        case 41:
          break;
        case 5: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 42:
          break;
        case 15: 
          { return JB_TOKEN_AND;
          }
        case 43:
          break;
        case 8: 
          { return JB_TOKEN_COLON;
          }
        case 44:
          break;
        case 27: 
          { return JB_TOKEN_NARRATIVE;
          }
        case 45:
          break;
        case 25: 
          { return JB_TOKEN_SCENARIO;
          }
        case 46:
          break;
        case 22: 
          { return JB_TOKEN_AFTER;
          }
        case 47:
          break;
        case 10: 
          { return JB_TOKEN_DBRACKET_OPEN;
          }
        case 48:
          break;
        case 2: 
          { return JB_TOKEN_SPACE;
          }
        case 49:
          break;
        case 1: 
          { return JB_TOKEN_WORD;
          }
        case 50:
          break;
        case 28: 
          { return JB_TOKEN_LIFECYCLE;
          }
        case 51:
          break;
        case 7: 
          { return JB_TOKEN_PIPE;
          }
        case 52:
          break;
        case 13: 
          { return JB_TOKEN_COMMENT;
          }
        case 53:
          break;
        case 11: 
          { return JB_TOKEN_DBRACKET_CLOSE;
          }
        case 54:
          break;
        case 18: 
          { return JB_TOKEN_PATH;
          }
        case 55:
          break;
        case 6: 
          { return JB_TOKEN_BRACKET_CLOSE;
          }
        case 56:
          break;
        case 29: 
          { return JB_TOKEN_GIVEN_STORIES;
          }
        case 57:
          break;
        case 16: 
          { return JB_TOKEN_WHEN;
          }
        case 58:
          break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
