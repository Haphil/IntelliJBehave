/* The following code was generated by JFlex 1.4.3 on 22.04.15 14:41 */

package com.github.kumaraman21.intellijbehave.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.github.kumaraman21.intellijbehave.parser.IJBehaveElementType.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22.04.15 14:41 from the specification file
 * <tt>C:/Users/debritod/Work/Intellij-Idea/IntelliJBehave/src/com/github/kumaraman21/intellijbehave/parser/_JBehaveLexer.flex</tt>
 */
public class _JBehaveLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = "\11\0\1\1\1\3\1\24\1\1\1\2\22\0\1\22\1\5\12\0" +
          "\1\25\1\6\1\21\1\15\12\23\1\13\1\0\1\7\1\0\1\10" +
          "\1\0\1\20\1\47\1\61\2\12\1\51\1\12\1\42\3\12\1\63" +
          "\1\56\1\26\1\32\1\62\3\12\1\36\1\46\2\12\1\44\2\12" +
          "\1\4\1\0\1\16\2\0\1\17\1\0\1\31\1\14\1\37\1\50" +
          "\1\27\1\57\1\14\1\45\1\34\2\14\1\55\1\53\1\40\1\41" +
          "\1\54\1\14\1\33\1\43\1\30\1\14\1\35\1\14\1\52\1\60" +
          "\1\14\1\0\1\11\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 = "\1\0\1\1\1\2\3\3\1\1\1\4\1\5\1\6" +
          "\1\1\1\7\1\1\1\10\1\1\1\10\1\11\15\1" +
          "\1\0\2\1\1\0\1\12\1\13\1\14\20\1\1\0" +
          "\1\1\2\0\1\15\2\16\1\1\1\0\1\16\10\1" +
          "\1\17\6\1\1\0\1\1\1\0\1\1\2\0\3\1" +
          "\3\0\2\16\3\1\1\0\5\1\1\20\1\21\5\1" +
          "\3\22\1\1\1\0\1\22\1\1\1\0\1\1\1\0" +
          "\2\1\1\0\1\16\1\0\1\16\1\23\1\0\1\23" +
          "\1\0\2\1\1\0\1\16\1\0\1\1\1\24\2\1" +
          "\1\25\6\1\1\0\2\1\2\0\2\1\2\0\2\1" +
          "\1\0\2\16\2\1\3\0\1\16\2\1\1\0\2\16" +
          "\1\1\1\23\1\1\2\0\5\1\1\26\3\1\2\22" +
          "\1\1\2\22\1\0\3\22\1\1\1\22\1\0\2\1" +
          "\2\0\3\22\1\1\1\0\1\16\1\22\1\1\1\0" +
          "\1\16\1\23\1\0\3\22\1\1\1\0\1\16\1\22" +
          "\1\1\1\0\1\16\1\27\6\1\1\30\2\1\2\0" +
          "\2\16\2\1\1\0\2\1\3\0\2\16\1\1\1\23" +
          "\1\1\1\0\2\1\2\0\1\23\1\0\3\1\1\31" +
          "\2\1\3\22\1\1\1\22\1\0\2\22\1\1\1\22" +
          "\1\0\1\22\1\0\3\22\1\16\1\22\1\16\2\22" +
          "\1\1\1\22\1\0\1\22\1\0\3\22\1\16\1\22" +
          "\1\16\1\1\1\32\1\1\1\33\3\1\1\34\1\1" +
          "\1\35\2\1\1\36";

  private static int [] zzUnpackAction() {
    int[] result = new int[306];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c" +
          "\0\u01a0\0\320\0\u0104\0\64\0\u01d4\0\u0208\0\u023c\0\320" +
          "\0\320\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8" +
          "\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548" +
          "\0\u057c\0\u05b0\0\u05e4\0\64\0\u0208\0\u0618\0\u064c\0\u0680" +
          "\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820" +
          "\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0" +
          "\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60" +
          "\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0478" +
          "\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c" +
          "\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c" +
          "\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac" +
          "\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u0478\0\u0478\0\u12e4" +
          "\0\u1318\0\u134c\0\u1380\0\u13b4\0\u0dd0\0\u08f0\0\u0e38\0\u13e8" +
          "\0\u141c\0\u09f4\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554" +
          "\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u10a8\0\u1658\0\u10dc\0\u168c" +
          "\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4\0\64\0\u17f8" +
          "\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998" +
          "\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38" +
          "\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u1c3c\0\u1ca4" +
          "\0\u1c70\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10" +
          "\0\u1e44\0\u1e78\0\u1e10\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c" +
          "\0\u1fb0\0\u1fe4\0\u2018\0\64\0\u204c\0\u2080\0\u20b4\0\u1998" +
          "\0\u20e8\0\u20e8\0\u19cc\0\u211c\0\u211c\0\u1a00\0\u1450\0\u1a68" +
          "\0\u2150\0\u1484\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u1ba0" +
          "\0\u1520\0\u1c08\0\u2288\0\u22bc\0\u22f0\0\u15f0\0\u2324\0\u2358" +
          "\0\u238c\0\u1e44\0\u23c0\0\u1d74\0\u16c0\0\u1ddc\0\u23f4\0\u2428" +
          "\0\u245c\0\u1790\0\u2490\0\u24c4\0\u24f8\0\u1f48\0\u252c\0\u2560" +
          "\0\u2594\0\u25c8\0\u25fc\0\u2630\0\64\0\u2664\0\u2698\0\u26cc" +
          "\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\u2804\0\u2838\0\u286c" +
          "\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970\0\u29a4\0\u293c\0\u29d8" +
          "\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8\0\u2adc\0\u2970\0\u2b10\0\u2b44" +
          "\0\u2b78\0\u2bac\0\u0478\0\u2be0\0\u2c14\0\u2664\0\u21b8\0\u26cc" +
          "\0\u2c48\0\u2220\0\u2c7c\0\u2734\0\u2cb0\0\u2cb0\0\u2768\0\u2768" +
          "\0\u2ce4\0\u2ce4\0\u2838\0\u2324\0\u28a0\0\u279c\0\u2358\0\u2804" +
          "\0\u2d18\0\u2d4c\0\u2d4c\0\u2d80\0\u2d80\0\u2db4\0\u2db4\0\u2a40" +
          "\0\u2490\0\u2aa8\0\u2de8\0\u24c4\0\u2e1c\0\u2e50\0\64\0\u2e84" +
          "\0\64\0\u2eb8\0\u2734\0\u2d18\0\64\0\u2eec\0\64\0\u2f20" +
          "\0\u2f54\0\64";

  private static int [] zzUnpackRowMap() {
    int[] result = new int[306];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 = "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10" +
          "\1\11\1\12\1\13\1\14\3\15\1\2\1\16\1\2" +
          "\1\3\1\17\1\20\1\21\1\22\3\15\1\23\3\15" +
          "\1\24\3\15\1\25\1\15\1\26\1\15\1\27\1\30" +
          "\1\15\1\31\4\15\1\32\2\15\1\33\2\13\1\2" +
          "\3\0\5\2\1\0\6\2\1\0\1\2\1\0\1\2" +
          "\2\0\36\2\1\0\1\3\1\4\2\5\15\0\1\3" +
          "\44\0\1\5\144\0\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\1\2\1\0\1\34\1\36\1\34\2\2\1\34" +
          "\1\37\1\34\1\0\1\34\2\0\36\34\1\2\3\0" +
          "\2\2\1\40\2\2\1\0\6\2\1\0\1\2\1\0" +
          "\1\2\2\0\36\2\1\41\2\42\1\0\3\41\1\43" +
          "\1\41\1\42\6\41\1\42\1\41\1\42\1\41\2\42" +
          "\36\41\1\2\3\0\4\2\1\44\1\0\6\2\1\0" +
          "\1\2\1\0\1\2\2\0\37\2\3\0\1\34\1\2" +
          "\1\34\1\35\1\2\1\0\1\34\1\2\1\34\2\2" +
          "\1\34\1\37\1\34\1\0\1\34\2\0\36\34\1\45" +
          "\3\0\5\45\1\0\10\45\1\0\1\45\1\0\37\45" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\1\2\1\0" +
          "\1\34\1\2\1\34\2\2\1\34\1\37\1\46\1\0" +
          "\1\47\2\0\36\34\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\1\2\1\0\1\34\1\36\1\34\2\2\1\34" +
          "\1\37\1\34\1\0\1\34\2\0\1\34\1\50\34\34" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\1\2\1\0" +
          "\1\34\1\36\1\34\2\2\1\34\1\37\1\34\1\0" +
          "\1\34\2\0\3\34\1\51\32\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\1\2\1\0\1\34\1\36\1\34" +
          "\2\2\1\34\1\37\1\34\1\0\1\34\2\0\11\34" +
          "\1\52\24\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\1\2\1\0\1\34\1\36\1\34\2\2\1\34\1\37" +
          "\1\34\1\0\1\34\2\0\6\34\1\53\27\34\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\1\2\1\0\1\34" +
          "\1\36\1\34\2\2\1\34\1\37\1\34\1\0\1\34" +
          "\2\0\17\34\1\54\16\34\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\1\2\1\0\1\34\1\36\1\34\2\2" +
          "\1\34\1\37\1\34\1\0\1\34\2\0\17\34\1\55" +
          "\14\34\1\56\1\34\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\1\2\1\0\1\34\1\36\1\34\2\2\1\34" +
          "\1\37\1\34\1\0\1\34\2\0\12\34\1\57\16\34" +
          "\1\60\4\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\1\2\1\0\1\34\1\36\1\34\2\2\1\34\1\37" +
          "\1\34\1\0\1\34\2\0\24\34\1\61\11\34\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\1\2\1\0\1\34" +
          "\1\36\1\34\2\2\1\34\1\37\1\34\1\0\1\34" +
          "\2\0\6\34\1\62\27\34\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\1\2\1\0\1\34\1\36\1\34\2\2" +
          "\1\34\1\37\1\34\1\0\1\34\2\0\1\34\1\63" +
          "\34\34\1\2\3\0\1\34\1\2\1\34\1\35\1\2" +
          "\1\0\1\34\1\2\1\34\2\64\1\34\1\37\1\34" +
          "\1\0\1\34\2\0\36\34\1\65\2\66\1\0\5\65" +
          "\1\66\6\65\1\66\1\65\1\66\1\65\2\66\36\65" +
          "\1\2\3\0\1\15\2\2\1\67\1\2\1\0\1\15" +
          "\1\2\3\15\1\2\1\0\1\2\1\0\1\15\2\0" +
          "\36\15\4\0\1\37\1\0\1\37\1\70\2\0\1\37" +
          "\1\0\1\37\2\71\3\37\1\0\1\37\2\0\36\37" +
          "\1\2\3\0\2\2\1\72\2\2\1\0\6\2\1\0" +
          "\1\2\1\0\1\2\2\0\36\2\1\41\2\42\1\0" +
          "\4\41\1\73\1\42\6\41\1\42\1\41\1\42\1\41" +
          "\2\42\36\41\3\42\1\0\4\42\1\74\53\42\1\75" +
          "\2\76\1\0\4\75\1\77\1\76\6\75\1\76\1\75" +
          "\1\76\1\75\2\76\36\75\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\1\2\1\0\1\34\1\2\1\34\2\64" +
          "\1\34\1\37\1\34\1\0\1\100\2\0\36\34\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\1\2\1\0\1\34" +
          "\1\2\1\34\2\64\1\34\1\37\1\46\1\0\1\47" +
          "\2\0\36\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\1\2\1\0\1\34\1\2\1\34\2\64\1\34\1\37" +
          "\1\34\1\0\1\34\2\0\2\34\1\101\33\34\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\1\2\1\0\1\34" +
          "\1\2\1\34\2\64\1\34\1\37\1\34\1\0\1\34" +
          "\2\0\5\34\1\102\30\34\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\1\2\1\0\1\34\1\2\1\34\2\64" +
          "\1\34\1\37\1\34\1\0\1\34\2\0\1\34\1\103" +
          "\34\34\1\2\3\0\1\34\1\2\1\34\1\35\1\2" +
          "\1\0\1\34\1\2\1\34\2\64\1\34\1\37\1\34" +
          "\1\0\1\34\2\0\7\34\1\104\26\34\1\2\3\0" +
          "\1\34\1\2\1\34\1\35\1\2\1\0\1\34\1\2" +
          "\1\34\2\64\1\34\1\37\1\34\1\0\1\34\2\0" +
          "\1\34\1\105\34\34\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\1\2\1\0\1\34\1\2\1\34\2\64\1\34" +
          "\1\37\1\34\1\0\1\34\2\0\1\34\1\106\34\34" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\1\2\1\0" +
          "\1\34\1\2\1\34\2\64\1\34\1\37\1\34\1\0" +
          "\1\34\2\0\35\34\1\107\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\1\2\1\0\1\34\1\2\1\34\2\64" +
          "\1\34\1\37\1\34\1\0\1\34\2\0\22\34\1\110" +
          "\13\34\1\2\3\0\1\34\1\2\1\34\1\35\1\2" +
          "\1\0\1\34\1\2\1\34\2\64\1\34\1\37\1\34" +
          "\1\0\1\34\2\0\2\34\1\111\33\34\1\2\3\0" +
          "\1\34\1\2\1\34\1\35\1\2\1\0\1\34\1\2" +
          "\1\34\2\64\1\34\1\37\1\34\1\0\1\34\2\0" +
          "\3\34\1\112\32\34\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\1\2\1\0\1\34\1\2\1\34\2\64\1\34" +
          "\1\37\1\34\1\0\1\34\2\0\31\34\1\113\4\34" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\1\2\1\0" +
          "\1\34\1\2\1\34\2\64\1\34\1\37\1\34\1\0" +
          "\1\34\2\0\31\34\1\114\4\34\1\2\3\0\1\115" +
          "\1\2\1\115\1\116\1\2\1\0\1\115\1\2\1\115" +
          "\2\2\1\115\1\117\1\115\1\117\1\115\2\0\36\115" +
          "\1\65\2\66\1\0\4\65\1\120\1\66\6\65\1\66" +
          "\1\65\1\66\1\65\2\66\36\65\3\66\1\0\4\66" +
          "\1\121\53\66\1\122\2\123\1\0\5\122\1\123\6\122" +
          "\1\123\1\122\1\123\1\122\2\123\36\122\3\66\1\0" +
          "\60\66\4\0\1\117\1\0\1\117\1\124\2\0\1\117" +
          "\1\0\1\117\2\0\5\117\2\0\36\117\3\72\1\0" +
          "\60\72\1\41\2\42\1\0\1\125\1\41\1\125\1\126" +
          "\1\73\1\42\1\125\1\41\1\125\2\127\1\125\1\130" +
          "\1\125\1\42\1\125\2\42\36\125\3\42\1\0\1\130" +
          "\1\42\1\130\1\131\1\74\1\42\1\130\1\42\1\130" +
          "\2\132\3\130\1\42\1\130\2\42\36\130\1\75\2\76" +
          "\1\0\4\75\1\133\1\76\6\75\1\76\1\75\1\76" +
          "\1\75\2\76\36\75\3\76\1\0\4\76\1\134\53\76" +
          "\1\75\2\76\1\0\1\135\1\75\1\135\1\136\1\133" +
          "\1\76\1\135\1\75\1\135\2\137\1\135\1\140\1\135" +
          "\1\76\1\135\2\76\36\135\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\1\2\1\0\1\34\1\2\1\34\2\64" +
          "\1\34\1\37\1\141\1\0\1\100\2\0\36\34\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\1\2\1\0\1\34" +
          "\1\2\1\34\2\64\1\34\1\37\1\34\1\0\1\34" +
          "\2\0\3\34\1\142\32\34\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\1\2\1\0\1\34\1\2\1\34\2\64" +
          "\1\34\1\37\1\34\1\0\1\34\2\0\5\34\1\143" +
          "\30\34\1\2\3\0\1\34\1\2\1\34\1\35\1\2" +
          "\1\0\1\34\1\2\1\34\2\64\1\34\1\37\1\34" +
          "\1\0\1\34\2\0\12\34\1\144\23\34\1\2\3\0" +
          "\1\34\1\2\1\34\1\35\1\2\1\0\1\34\1\2" +
          "\1\34\2\64\1\34\1\37\1\34\1\0\1\34\2\0" +
          "\1\34\1\145\34\34\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\1\2\1\0\1\34\1\2\1\34\2\64\1\34" +
          "\1\37\1\34\1\0\1\34\2\0\12\34\1\146\23\34" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\1\2\1\0" +
          "\1\34\1\2\1\34\2\64\1\34\1\37\1\34\1\0" +
          "\1\34\2\0\12\34\1\147\23\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\1\2\1\0\1\34\1\2\1\34" +
          "\2\64\1\34\1\37\1\34\1\0\1\34\2\0\23\34" +
          "\1\150\12\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\1\2\1\0\1\34\1\2\1\34\2\64\1\34\1\37" +
          "\1\34\1\0\1\34\2\0\1\34\1\151\34\34\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\1\2\1\0\1\34" +
          "\1\2\1\34\2\64\1\34\1\37\1\34\1\0\1\34" +
          "\2\0\25\34\1\152\10\34\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\1\2\1\0\1\34\1\2\1\34\2\64" +
          "\1\34\1\37\1\34\1\0\1\34\2\0\1\34\1\153" +
          "\34\34\1\2\3\0\1\34\1\2\1\34\1\35\1\2" +
          "\1\0\1\34\1\2\1\34\2\64\1\34\1\37\1\34" +
          "\1\0\1\34\2\0\13\34\1\154\22\34\1\2\3\0" +
          "\1\155\1\2\1\155\1\116\1\2\1\0\1\155\1\2" +
          "\1\155\1\156\1\64\1\155\1\157\1\155\1\117\1\155" +
          "\2\0\36\155\1\160\2\161\1\0\5\160\1\161\6\160" +
          "\1\161\1\160\1\161\1\160\2\161\36\160\4\0\1\157" +
          "\1\0\1\157\1\124\2\0\1\157\1\0\1\157\1\162" +
          "\1\71\3\157\1\117\1\157\2\0\36\157\1\65\2\66" +
          "\1\0\1\120\1\65\1\120\1\65\1\120\1\66\1\120" +
          "\1\65\1\120\2\163\1\120\1\121\1\120\1\66\1\120" +
          "\2\66\36\120\3\66\1\0\1\121\1\66\1\121\1\66" +
          "\1\121\1\66\1\121\1\66\1\121\2\164\3\121\1\66" +
          "\1\121\2\66\36\121\1\122\2\123\1\0\4\122\1\165" +
          "\1\123\6\122\1\123\1\122\1\123\1\122\2\123\36\122" +
          "\3\123\1\0\4\123\1\166\53\123\3\161\1\0\60\161" +
          "\1\41\2\42\1\0\1\125\1\41\1\125\1\126\1\73" +
          "\1\42\1\125\1\41\1\125\2\167\1\125\1\130\1\125" +
          "\1\42\1\125\2\42\36\125\1\170\2\171\1\0\4\170" +
          "\1\172\1\171\6\170\1\171\1\170\1\171\1\170\2\171" +
          "\36\170\1\41\2\42\1\0\1\125\1\41\1\125\1\126" +
          "\1\73\1\42\1\125\1\41\1\125\2\41\1\125\1\130" +
          "\1\125\1\42\1\125\2\42\36\125\3\42\1\0\1\130" +
          "\1\42\1\130\1\131\1\74\1\42\1\130\1\42\1\130" +
          "\2\173\3\130\1\42\1\130\2\42\36\130\3\171\1\0" +
          "\4\171\1\174\53\171\3\42\1\0\1\130\1\42\1\130" +
          "\1\131\1\74\1\42\1\130\1\42\1\130\2\42\3\130" +
          "\1\42\1\130\2\42\36\130\1\75\2\76\1\0\1\135" +
          "\1\75\1\135\1\136\1\175\1\76\1\135\1\75\1\135" +
          "\2\137\1\135\1\140\1\135\1\76\1\135\2\76\36\135" +
          "\3\76\1\0\1\140\1\76\1\140\1\176\1\177\1\76" +
          "\1\140\1\76\1\140\2\200\3\140\1\76\1\140\2\76" +
          "\36\140\1\75\2\76\1\0\1\135\1\75\1\135\1\136" +
          "\1\133\1\76\1\135\1\75\1\135\2\201\1\135\1\140" +
          "\1\135\1\76\1\135\2\76\36\135\1\202\2\203\1\0" +
          "\4\202\1\204\1\203\6\202\1\203\1\202\1\203\1\202" +
          "\2\203\36\202\1\75\2\76\1\0\1\135\1\75\1\135" +
          "\1\136\1\133\1\76\1\135\1\75\1\135\2\75\1\135" +
          "\1\140\1\135\1\76\1\135\2\76\36\135\3\76\1\0" +
          "\1\140\1\76\1\140\1\176\1\134\1\76\1\140\1\76" +
          "\1\140\2\205\3\140\1\76\1\140\2\76\36\140\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\1\2\1\0\1\34" +
          "\1\2\1\34\2\64\1\34\1\37\1\34\1\0\1\206" +
          "\2\0\36\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\1\2\1\0\1\34\1\207\1\34\2\64\1\34\1\37" +
          "\1\34\1\0\1\34\2\0\36\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\1\2\1\0\1\34\1\2\1\34" +
          "\2\64\1\34\1\37\1\34\1\0\1\34\2\0\3\34" +
          "\1\210\32\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\1\2\1\0\1\34\1\2\1\34\2\64\1\34\1\37" +
          "\1\34\1\0\1\34\2\0\3\34\1\211\32\34\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\1\2\1\0\1\34" +
          "\1\2\1\34\2\64\1\34\1\37\1\34\1\0\1\34" +
          "\2\0\12\34\1\212\23\34\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\1\2\1\0\1\34\1\2\1\34\2\64" +
          "\1\34\1\37\1\34\1\0\1\34\2\0\4\34\1\213" +
          "\31\34\1\2\3\0\1\34\1\2\1\34\1\35\1\2" +
          "\1\0\1\34\1\2\1\34\2\64\1\34\1\37\1\34" +
          "\1\0\1\34\2\0\5\34\1\214\30\34\1\2\3\0" +
          "\1\34\1\2\1\34\1\35\1\2\1\0\1\34\1\2" +
          "\1\34\2\64\1\34\1\37\1\34\1\0\1\34\2\0" +
          "\26\34\1\215\7\34\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\1\2\1\0\1\34\1\2\1\34\2\64\1\34" +
          "\1\37\1\34\1\0\1\34\2\0\11\34\1\216\24\34" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\1\2\1\0" +
          "\1\34\1\2\1\34\2\64\1\34\1\37\1\34\1\0" +
          "\1\34\2\0\5\34\1\217\30\34\1\160\2\161\1\0" +
          "\4\160\1\220\1\161\6\160\1\161\1\160\1\161\1\160" +
          "\2\161\36\160\3\161\1\0\4\161\1\221\53\161\1\65" +
          "\2\66\1\0\1\222\1\65\1\222\1\223\1\120\1\66" +
          "\1\222\1\65\1\222\2\65\1\222\1\224\1\222\1\224" +
          "\1\222\2\66\36\222\3\66\1\0\1\224\1\66\1\224" +
          "\1\225\1\121\1\66\1\224\1\66\1\224\2\66\5\224" +
          "\2\66\36\224\1\122\2\123\1\0\1\226\1\122\1\226" +
          "\1\227\1\165\1\123\1\226\1\122\1\226\2\122\1\226" +
          "\1\230\1\226\1\123\1\226\2\123\36\226\3\123\1\0" +
          "\1\230\1\123\1\230\1\231\1\166\1\123\1\230\1\123" +
          "\1\230\2\123\3\230\1\123\1\230\2\123\36\230\1\41" +
          "\2\42\1\0\1\232\1\41\1\232\1\233\1\73\1\42" +
          "\1\232\1\41\1\232\2\41\1\232\1\234\1\232\1\234" +
          "\1\232\2\42\36\232\1\170\2\171\1\0\4\170\1\235" +
          "\1\171\6\170\1\171\1\170\1\171\1\170\2\171\36\170" +
          "\3\171\1\0\4\171\1\236\53\171\1\170\2\171\1\0" +
          "\1\237\1\170\1\237\1\170\1\235\1\171\1\237\1\170" +
          "\1\237\2\240\1\237\1\241\1\237\1\171\1\237\2\171" +
          "\36\237\3\42\1\0\1\234\1\42\1\234\1\242\1\74" +
          "\1\42\1\234\1\42\1\234\2\42\5\234\2\42\36\234" +
          "\3\171\1\0\1\241\1\171\1\241\1\171\1\236\1\171" +
          "\1\241\1\171\1\241\2\243\3\241\1\171\1\241\2\171" +
          "\36\241\3\203\1\0\4\203\1\244\53\203\3\76\1\0" +
          "\1\140\1\76\1\140\1\176\1\134\1\76\1\140\1\76" +
          "\1\140\2\76\3\140\1\76\1\140\2\76\36\140\1\75" +
          "\2\76\1\0\1\245\1\75\1\245\1\246\1\133\1\76" +
          "\1\245\1\75\1\245\2\75\1\245\1\247\1\245\1\247" +
          "\1\245\2\76\36\245\1\202\2\203\1\0\4\202\1\250" +
          "\1\203\6\202\1\203\1\202\1\203\1\202\2\203\36\202" +
          "\3\203\1\0\4\203\1\251\53\203\1\202\2\203\1\0" +
          "\1\252\1\202\1\252\1\202\1\253\1\203\1\252\1\202" +
          "\1\252\2\254\1\252\1\255\1\252\1\203\1\252\2\203" +
          "\36\252\3\76\1\0\1\247\1\76\1\247\1\256\1\134" +
          "\1\76\1\247\1\76\1\247\2\76\5\247\2\76\36\247" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\1\2\1\0" +
          "\1\34\1\2\1\34\2\64\1\34\1\37\1\257\1\0" +
          "\1\206\2\0\36\34\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\1\2\1\0\1\34\1\2\1\34\2\64\1\34" +
          "\1\37\1\34\1\0\1\34\2\0\2\34\1\260\33\34" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\1\2\1\0" +
          "\1\34\1\2\1\34\2\64\1\34\1\37\1\34\1\0" +
          "\1\34\2\0\5\34\1\261\30\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\1\2\1\0\1\34\1\2\1\34" +
          "\2\64\1\34\1\37\1\34\1\0\1\34\2\0\10\34" +
          "\1\262\25\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\1\2\1\0\1\34\1\2\1\34\2\64\1\263\1\37" +
          "\1\34\1\0\1\34\2\0\36\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\1\2\1\0\1\34\1\264\1\34" +
          "\2\64\1\34\1\37\1\34\1\0\1\34\2\0\36\34" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\1\2\1\0" +
          "\1\34\1\2\1\34\2\64\1\34\1\37\1\34\1\0" +
          "\1\34\2\0\27\34\1\265\6\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\1\2\1\0\1\34\1\2\1\34" +
          "\2\64\1\34\1\37\1\34\1\0\1\34\2\0\32\34" +
          "\1\266\3\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\1\2\1\0\1\34\1\2\1\34\2\64\1\34\1\37" +
          "\1\34\1\0\1\34\2\0\1\34\1\267\34\34\1\160" +
          "\2\161\1\0\1\270\1\160\1\270\1\160\1\220\1\161" +
          "\1\270\1\160\1\270\1\271\1\272\1\270\1\273\1\270" +
          "\1\221\1\270\2\161\36\270\3\161\1\0\1\273\1\161" +
          "\1\273\1\161\1\221\1\161\1\273\1\161\1\273\1\274" +
          "\1\275\3\273\1\221\1\273\2\161\36\273\1\65\2\66" +
          "\1\0\1\276\1\65\1\276\1\223\1\120\1\66\1\276" +
          "\1\65\1\276\1\277\1\163\1\276\1\300\1\276\1\224" +
          "\1\276\2\66\36\276\1\160\2\161\1\0\4\160\1\301" +
          "\1\161\6\160\1\161\1\160\1\161\1\160\2\161\36\160" +
          "\3\66\1\0\1\300\1\66\1\300\1\225\1\121\1\66" +
          "\1\300\1\66\1\300\1\302\1\164\3\300\1\224\1\300" +
          "\2\66\36\300\3\161\1\0\4\161\1\303\53\161\1\122" +
          "\2\123\1\0\1\226\1\122\1\226\1\227\1\165\1\123" +
          "\1\226\1\122\1\226\2\304\1\226\1\230\1\226\1\123" +
          "\1\226\2\123\36\226\1\65\2\66\1\0\4\65\1\305" +
          "\1\66\6\65\1\66\1\65\1\66\1\65\2\66\36\65" +
          "\3\123\1\0\1\230\1\123\1\230\1\231\1\166\1\123" +
          "\1\230\1\123\1\230\2\306\3\230\1\123\1\230\2\123" +
          "\36\230\3\66\1\0\4\66\1\307\53\66\1\41\2\42" +
          "\1\0\1\310\1\41\1\310\1\233\1\73\1\42\1\310" +
          "\1\41\1\310\1\311\1\167\1\310\1\312\1\310\1\234" +
          "\1\310\2\42\36\310\1\313\2\314\1\0\4\313\1\315" +
          "\1\314\6\313\1\314\1\313\1\314\1\313\2\314\36\313" +
          "\3\42\1\0\1\312\1\42\1\312\1\242\1\74\1\42" +
          "\1\312\1\42\1\312\1\316\1\173\3\312\1\234\1\312" +
          "\2\42\36\312\1\170\2\171\1\0\1\237\1\170\1\237" +
          "\1\170\1\235\1\171\1\237\1\170\1\237\2\317\1\237" +
          "\1\241\1\237\1\171\1\237\2\171\36\237\3\171\1\0" +
          "\1\241\1\171\1\241\1\171\1\236\1\171\1\241\1\171" +
          "\1\241\2\320\3\241\1\171\1\241\2\171\36\241\1\170" +
          "\2\171\1\0\1\237\1\170\1\237\1\170\1\235\1\171" +
          "\1\237\1\170\1\237\2\170\1\237\1\241\1\237\1\171" +
          "\1\237\2\171\36\237\3\314\1\0\4\314\1\321\53\314" +
          "\3\171\1\0\1\241\1\171\1\241\1\171\1\236\1\171" +
          "\1\241\1\171\1\241\2\171\3\241\1\171\1\241\2\171" +
          "\36\241\3\203\1\0\1\255\1\203\1\255\1\203\1\322" +
          "\1\203\1\255\1\203\1\255\2\323\3\255\1\203\1\255" +
          "\2\203\36\255\1\75\2\76\1\0\1\324\1\75\1\324" +
          "\1\246\1\133\1\76\1\324\1\75\1\324\1\325\1\201" +
          "\1\324\1\326\1\324\1\247\1\324\2\76\36\324\1\327" +
          "\2\330\1\0\4\327\1\331\1\330\6\327\1\330\1\327" +
          "\1\330\1\327\2\330\36\327\3\76\1\0\1\326\1\76" +
          "\1\326\1\256\1\134\1\76\1\326\1\76\1\326\1\332" +
          "\1\205\3\326\1\247\1\326\2\76\36\326\1\202\2\203" +
          "\1\0\1\252\1\202\1\252\1\202\1\253\1\203\1\252" +
          "\1\202\1\252\2\333\1\252\1\255\1\252\1\203\1\252" +
          "\2\203\36\252\3\203\1\0\1\255\1\203\1\255\1\203" +
          "\1\322\1\203\1\255\1\203\1\255\2\334\3\255\1\203" +
          "\1\255\2\203\36\255\1\202\2\203\1\0\1\252\1\202" +
          "\1\252\1\202\1\250\1\203\1\252\1\202\1\252\2\333" +
          "\1\252\1\255\1\252\1\203\1\252\2\203\36\252\1\202" +
          "\2\203\1\0\1\252\1\202\1\252\1\202\1\250\1\203" +
          "\1\252\1\202\1\252\2\202\1\252\1\255\1\252\1\203" +
          "\1\252\2\203\36\252\3\203\1\0\1\255\1\203\1\255" +
          "\1\203\1\251\1\203\1\255\1\203\1\255\2\334\3\255" +
          "\1\203\1\255\2\203\36\255\3\330\1\0\4\330\1\335" +
          "\53\330\1\2\3\0\1\34\1\2\1\34\1\35\1\2" +
          "\1\0\1\34\1\2\1\34\2\64\1\34\1\37\1\34" +
          "\1\0\1\336\2\0\36\34\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\1\2\1\0\1\34\1\2\1\34\2\64" +
          "\1\34\1\37\1\34\1\0\1\34\2\0\6\34\1\337" +
          "\27\34\1\2\3\0\1\34\1\2\1\34\1\35\1\2" +
          "\1\0\1\34\1\2\1\34\2\64\1\34\1\37\1\34" +
          "\1\0\1\34\2\0\6\34\1\340\27\34\1\2\3\0" +
          "\1\34\1\2\1\34\1\35\1\2\1\0\1\34\1\2" +
          "\1\34\2\64\1\34\1\37\1\34\1\0\1\34\2\0" +
          "\2\34\1\341\33\34\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\1\2\1\0\1\34\1\2\1\34\2\64\1\34" +
          "\1\37\1\34\1\0\1\34\2\0\21\34\1\342\14\34" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\1\2\1\0" +
          "\1\34\1\2\1\34\2\64\1\34\1\37\1\34\1\0" +
          "\1\34\2\0\1\34\1\343\34\34\1\2\3\0\1\34" +
          "\1\2\1\34\1\35\1\2\1\0\1\34\1\2\1\34" +
          "\2\64\1\34\1\37\1\34\1\0\1\34\2\0\11\34" +
          "\1\344\24\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\1\2\1\0\1\34\1\345\1\34\2\64\1\34\1\37" +
          "\1\34\1\0\1\34\2\0\36\34\1\160\2\161\1\0" +
          "\1\220\1\160\1\220\1\160\1\220\1\161\1\220\1\160" +
          "\1\220\2\160\1\220\1\221\1\220\1\221\1\220\2\161" +
          "\36\220\3\161\1\0\1\221\1\161\1\221\1\161\1\221" +
          "\1\161\1\221\1\161\1\221\2\161\5\221\2\161\36\221" +
          "\1\160\2\161\1\0\1\301\1\160\1\301\1\160\1\220" +
          "\1\161\1\301\1\160\1\301\2\272\1\301\1\303\1\301" +
          "\1\161\1\301\2\161\36\301\3\161\1\0\1\303\1\161" +
          "\1\303\1\161\1\221\1\161\1\303\1\161\1\303\2\275" +
          "\3\303\1\161\1\303\2\161\36\303\1\122\2\123\1\0" +
          "\1\346\1\122\1\346\1\347\1\165\1\123\1\346\1\122" +
          "\1\346\2\122\1\346\1\350\1\346\1\350\1\346\2\123" +
          "\36\346\1\65\2\66\1\0\1\120\1\65\1\120\1\65" +
          "\1\120\1\66\1\120\1\65\1\120\2\65\1\120\1\121" +
          "\1\120\1\66\1\120\2\66\36\120\3\123\1\0\1\350" +
          "\1\123\1\350\1\351\1\166\1\123\1\350\1\123\1\350" +
          "\2\123\5\350\2\123\36\350\3\66\1\0\1\121\1\66" +
          "\1\121\1\66\1\121\1\66\1\121\1\66\1\121\2\66" +
          "\3\121\1\66\1\121\2\66\36\121\1\313\2\314\1\0" +
          "\4\313\1\352\1\314\6\313\1\314\1\313\1\314\1\313" +
          "\2\314\36\313\3\314\1\0\4\314\1\353\53\314\1\313" +
          "\2\314\1\0\1\354\1\313\1\354\1\313\1\352\1\314" +
          "\1\354\1\313\1\354\2\355\1\354\1\356\1\354\1\314" +
          "\1\354\2\314\36\354\1\170\2\171\1\0\1\357\1\170" +
          "\1\357\1\360\1\235\1\171\1\357\1\170\1\357\2\170" +
          "\1\357\1\361\1\357\1\361\1\357\2\171\36\357\3\171" +
          "\1\0\1\361\1\171\1\361\1\362\1\236\1\171\1\361" +
          "\1\171\1\361\2\171\5\361\2\171\36\361\3\314\1\0" +
          "\1\356\1\314\1\356\1\314\1\353\1\314\1\356\1\314" +
          "\1\356\2\363\3\356\1\314\1\356\2\314\36\356\3\203" +
          "\1\0\1\255\1\203\1\255\1\203\1\251\1\203\1\255" +
          "\1\203\1\255\2\203\3\255\1\203\1\255\2\203\36\255" +
          "\1\327\2\330\1\0\4\327\1\364\1\330\6\327\1\330" +
          "\1\327\1\330\1\327\2\330\36\327\3\330\1\0\4\330" +
          "\1\365\53\330\1\327\2\330\1\0\1\366\1\327\1\366" +
          "\1\327\1\367\1\330\1\366\1\327\1\366\2\370\1\366" +
          "\1\371\1\366\1\330\1\366\2\330\36\366\1\202\2\203" +
          "\1\0\1\372\1\202\1\372\1\373\1\250\1\203\1\372" +
          "\1\202\1\372\2\202\1\372\1\374\1\372\1\374\1\372" +
          "\2\203\36\372\3\203\1\0\1\374\1\203\1\374\1\375" +
          "\1\251\1\203\1\374\1\203\1\374\2\203\5\374\2\203" +
          "\36\374\3\330\1\0\1\371\1\330\1\371\1\330\1\376" +
          "\1\330\1\371\1\330\1\371\2\377\3\371\1\330\1\371" +
          "\2\330\36\371\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\1\2\1\0\1\34\1\2\1\34\2\64\1\34\1\37" +
          "\1\34\1\0\1\34\2\0\7\34\1\u0100\26\34\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\1\2\1\0\1\34" +
          "\1\2\1\34\2\64\1\34\1\37\1\34\1\0\1\34" +
          "\2\0\13\34\1\u0101\22\34\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\1\2\1\0\1\34\1\2\1\34\2\64" +
          "\1\34\1\37\1\34\1\0\1\34\2\0\13\34\1\u0102" +
          "\22\34\1\2\3\0\1\34\1\2\1\34\1\35\1\2" +
          "\1\0\1\34\1\2\1\34\2\64\1\34\1\37\1\34" +
          "\1\0\1\34\2\0\20\34\1\u0103\15\34\1\2\3\0" +
          "\1\34\1\2\1\34\1\35\1\2\1\0\1\34\1\2" +
          "\1\34\2\64\1\34\1\37\1\34\1\0\1\34\2\0" +
          "\15\34\1\u0104\20\34\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\1\2\1\0\1\34\1\2\1\34\2\64\1\34" +
          "\1\37\1\34\1\0\1\34\2\0\27\34\1\u0105\6\34" +
          "\1\122\2\123\1\0\1\u0106\1\122\1\u0106\1\347\1\165" +
          "\1\123\1\u0106\1\122\1\u0106\1\u0107\1\304\1\u0106\1\u0108" +
          "\1\u0106\1\350\1\u0106\2\123\36\u0106\1\160\2\161\1\0" +
          "\4\160\1\u0109\1\161\6\160\1\161\1\160\1\161\1\160" +
          "\2\161\36\160\3\123\1\0\1\u0108\1\123\1\u0108\1\351" +
          "\1\166\1\123\1\u0108\1\123\1\u0108\1\u010a\1\306\3\u0108" +
          "\1\350\1\u0108\2\123\36\u0108\3\161\1\0\4\161\1\u010b" +
          "\53\161\1\313\2\314\1\0\1\u010c\1\313\1\u010c\1\313" +
          "\1\352\1\314\1\u010c\1\313\1\u010c\1\u010d\1\u010e\1\u010c" +
          "\1\u010f\1\u010c\1\u0110\1\u010c\2\314\36\u010c\3\314\1\0" +
          "\1\u010f\1\314\1\u010f\1\314\1\353\1\314\1\u010f\1\314" +
          "\1\u010f\1\u0111\1\u0112\3\u010f\1\u0110\1\u010f\2\314\36\u010f" +
          "\1\313\2\314\1\0\1\354\1\313\1\354\1\313\1\352" +
          "\1\314\1\354\1\313\1\354\2\u010e\1\354\1\356\1\354" +
          "\1\314\1\354\2\314\36\354\1\313\2\314\1\0\1\354" +
          "\1\313\1\354\1\313\1\352\1\314\1\354\1\313\1\354" +
          "\2\313\1\354\1\356\1\354\1\314\1\354\2\314\36\354" +
          "\3\314\1\0\1\356\1\314\1\356\1\314\1\353\1\314" +
          "\1\356\1\314\1\356\2\u0112\3\356\1\314\1\356\2\314" +
          "\36\356\1\170\2\171\1\0\1\u0113\1\170\1\u0113\1\360" +
          "\1\235\1\171\1\u0113\1\170\1\u0113\1\u0114\1\317\1\u0113" +
          "\1\u0115\1\u0113\1\361\1\u0113\2\171\36\u0113\1\313\2\314" +
          "\1\0\4\313\1\u0116\1\314\6\313\1\314\1\313\1\314" +
          "\1\313\2\314\36\313\3\171\1\0\1\u0115\1\171\1\u0115" +
          "\1\362\1\236\1\171\1\u0115\1\171\1\u0115\1\u0117\1\320" +
          "\3\u0115\1\361\1\u0115\2\171\36\u0115\3\314\1\0\4\314" +
          "\1\u0118\56\314\1\0\1\356\1\314\1\356\1\314\1\353" +
          "\1\314\1\356\1\314\1\356\2\314\3\356\1\314\1\356" +
          "\2\314\36\356\1\327\2\330\1\0\1\u0119\1\327\1\u0119" +
          "\1\327\1\367\1\330\1\u0119\1\327\1\u0119\1\u011a\1\u011b" +
          "\1\u0119\1\u011c\1\u0119\1\u011d\1\u0119\2\330\36\u0119\3\330" +
          "\1\0\1\u011c\1\330\1\u011c\1\330\1\376\1\330\1\u011c" +
          "\1\330\1\u011c\1\u011e\1\u011f\3\u011c\1\u011d\1\u011c\2\330" +
          "\36\u011c\1\327\2\330\1\0\1\366\1\327\1\366\1\327" +
          "\1\364\1\330\1\366\1\327\1\366\2\u011b\1\366\1\371" +
          "\1\366\1\330\1\366\2\330\36\366\1\327\2\330\1\0" +
          "\1\366\1\327\1\366\1\327\1\364\1\330\1\366\1\327" +
          "\1\366\2\327\1\366\1\371\1\366\1\330\1\366\2\330" +
          "\36\366\3\330\1\0\1\371\1\330\1\371\1\330\1\365" +
          "\1\330\1\371\1\330\1\371\2\u011f\3\371\1\330\1\371" +
          "\2\330\36\371\1\202\2\203\1\0\1\u0120\1\202\1\u0120" +
          "\1\373\1\250\1\203\1\u0120\1\202\1\u0120\1\u0121\1\333" +
          "\1\u0120\1\u0122\1\u0120\1\374\1\u0120\2\203\36\u0120\1\327" +
          "\2\330\1\0\4\327\1\u0123\1\330\6\327\1\330\1\327" +
          "\1\330\1\327\2\330\36\327\3\203\1\0\1\u0122\1\203" +
          "\1\u0122\1\375\1\251\1\203\1\u0122\1\203\1\u0122\1\u0124" +
          "\1\334\3\u0122\1\374\1\u0122\2\203\36\u0122\3\330\1\0" +
          "\4\330\1\u0125\56\330\1\0\1\371\1\330\1\371\1\330" +
          "\1\365\1\330\1\371\1\330\1\371\2\330\3\371\1\330" +
          "\1\371\2\330\36\371\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\1\2\1\0\1\34\1\2\1\34\2\64\1\34" +
          "\1\37\1\34\1\0\1\34\2\0\1\34\1\u0126\34\34" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\1\2\1\0" +
          "\1\34\1\u0127\1\34\2\64\1\34\1\37\1\34\1\0" +
          "\1\34\2\0\36\34\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\1\2\1\0\1\34\1\2\1\34\2\64\1\34" +
          "\1\37\1\34\1\0\1\34\2\0\5\34\1\u0128\30\34" +
          "\1\2\3\0\1\34\1\2\1\34\1\35\1\2\1\0" +
          "\1\34\1\u0129\1\34\2\64\1\34\1\37\1\34\1\0" +
          "\1\34\2\0\36\34\1\2\3\0\1\34\1\2\1\34" +
          "\1\35\1\2\1\0\1\34\1\2\1\34\2\64\1\34" +
          "\1\37\1\34\1\0\1\34\2\0\1\34\1\u012a\34\34" +
          "\1\160\2\161\1\0\1\301\1\160\1\301\1\160\1\220" +
          "\1\161\1\301\1\160\1\301\2\160\1\301\1\303\1\301" +
          "\1\161\1\301\2\161\36\301\3\161\1\0\1\303\1\161" +
          "\1\303\1\161\1\221\1\161\1\303\1\161\1\303\2\161" +
          "\3\303\1\161\1\303\2\161\36\303\1\313\2\314\1\0" +
          "\1\u012b\1\313\1\u012b\1\313\1\352\1\314\1\u012b\1\313" +
          "\1\u012b\2\313\1\u012b\1\u0110\1\u012b\1\u0110\1\u012b\2\314" +
          "\36\u012b\3\314\1\0\1\u0110\1\314\1\u0110\1\314\1\353" +
          "\1\314\1\u0110\1\314\1\u0110\2\314\5\u0110\2\314\36\u0110" +
          "\1\327\2\330\1\0\1\u0119\1\327\1\u0119\1\327\1\364" +
          "\1\330\1\u0119\1\327\1\u0119\1\u011a\1\u011b\1\u0119\1\u011c" +
          "\1\u0119\1\u011d\1\u0119\2\330\36\u0119\1\327\2\330\1\0" +
          "\1\u012c\1\327\1\u012c\1\327\1\364\1\330\1\u012c\1\327" +
          "\1\u012c\2\327\1\u012c\1\u011d\1\u012c\1\u011d\1\u012c\2\330" +
          "\36\u012c\3\330\1\0\1\u011c\1\330\1\u011c\1\330\1\365" +
          "\1\330\1\u011c\1\330\1\u011c\1\u011e\1\u011f\3\u011c\1\u011d" +
          "\1\u011c\2\330\36\u011c\3\330\1\0\1\u011d\1\330\1\u011d" +
          "\1\330\1\365\1\330\1\u011d\1\330\1\u011d\2\330\5\u011d" +
          "\2\330\36\u011d\1\327\2\330\1\0\1\366\1\327\1\366" +
          "\1\327\1\367\1\330\1\366\1\327\1\366\2\u011b\1\366" +
          "\1\371\1\366\1\330\1\366\2\330\36\366\3\330\1\0" +
          "\1\371\1\330\1\371\1\330\1\376\1\330\1\371\1\330" +
          "\1\371\2\u011f\3\371\1\330\1\371\2\330\36\371\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\1\2\1\0\1\34" +
          "\1\u012d\1\34\2\64\1\34\1\37\1\34\1\0\1\34" +
          "\2\0\36\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\1\2\1\0\1\34\1\2\1\34\2\64\1\34\1\37" +
          "\1\34\1\0\1\34\2\0\6\34\1\u012e\27\34\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\1\2\1\0\1\34" +
          "\1\u012f\1\34\2\64\1\34\1\37\1\34\1\0\1\34" +
          "\2\0\36\34\1\2\3\0\1\34\1\2\1\34\1\35" +
          "\1\2\1\0\1\34\1\2\1\34\2\64\1\34\1\37" +
          "\1\34\1\0\1\34\2\0\1\34\1\u0130\34\34\1\2" +
          "\3\0\1\34\1\2\1\34\1\35\1\2\1\0\1\34" +
          "\1\2\1\34\2\64\1\34\1\37\1\34\1\0\1\34" +
          "\2\0\15\34\1\u0131\20\34\1\2\3\0\1\34\1\2" +
          "\1\34\1\35\1\2\1\0\1\34\1\u0132\1\34\2\64" +
          "\1\34\1\37\1\34\1\0\1\34\2\0\36\34";

  private static int [] zzUnpackTrans() {
    int[] result = new int[12168];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\3\1\1\11\4\1\1\11\5\1\2\11\15\1" +
          "\1\0\2\1\1\0\23\1\1\0\1\1\2\0\4\1" +
          "\1\0\20\1\1\0\1\1\1\0\1\1\2\0\3\1" +
          "\3\0\5\1\1\0\20\1\1\0\2\1\1\0\1\1" +
          "\1\0\2\1\1\0\1\1\1\0\2\1\1\0\1\1" +
          "\1\0\2\1\1\0\1\1\1\0\13\1\1\0\2\1" +
          "\2\0\2\1\2\0\2\1\1\0\4\1\3\0\3\1" +
          "\1\0\5\1\2\0\16\1\1\0\5\1\1\0\2\1" +
          "\2\0\4\1\1\0\3\1\1\0\2\1\1\0\4\1" +
          "\1\0\3\1\1\0\13\1\2\0\4\1\1\0\2\1" +
          "\3\0\5\1\1\0\2\1\2\0\1\1\1\0\13\1" +
          "\1\0\4\1\1\0\1\1\1\0\12\1\1\0\1\1" +
          "\1\0\23\1";

  private static int [] zzUnpackAttribute() {
    int[] result = new int[306];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _JBehaveLexer() {
    this(null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _JBehaveLexer(java.io.Reader in) {
    zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  private int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: {
          return JB_TOKEN_MKEY;
        }
        case 31:
          break;
        case 25: 
          { return JB_TOKEN_AT;
          }
        case 32:
          break;
        case 14: 
          { return JB_TOKEN_INJECT;
          }
        case 33:
          break;
        case 27: 
          { return JB_TOKEN_EXAMPLES;
          }
        case 34:
          break;
        case 24: 
          { return JB_TOKEN_BEFORE;
          }
        case 35:
          break;
        case 23: 
          { return JB_TOKEN_IP;
          }
        case 36:
          break;
        case 9: {
          return JB_TOKEN_COMMA;
          }
        case 37:
          break;
        case 3: 
          { return JB_TOKEN_NEWLINE;
          }
        case 38:
          break;
        case 17: 
          { return JB_TOKEN_THEN;
          }
        case 39:
          break;
        case 4: 
          { return JB_TOKEN_BRACKET_OPEN;
          }
        case 40:
          break;
        case 19: 
          { return JB_TOKEN_USER_INJECT;
          }
        case 41:
          break;
        case 21: 
          { return JB_TOKEN_GIVEN;
          }
        case 42:
          break;
        case 20: 
          { return JB_TOKEN_META;
          }
        case 43:
          break;
        case 8: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 44:
          break;
        case 15: 
          { return JB_TOKEN_AND;
          }
        case 45:
          break;
        case 7: 
          { return JB_TOKEN_COLON;
          }
        case 46:
          break;
        case 28: 
          { return JB_TOKEN_NARRATIVE;
          }
        case 47:
          break;
        case 26: 
          { return JB_TOKEN_SCENARIO;
          }
        case 48:
          break;
        case 22: 
          { return JB_TOKEN_AFTER;
          }
        case 49:
          break;
        case 10: 
          { return JB_TOKEN_DBRACKET_OPEN;
          }
        case 50:
          break;
        case 2: 
          { return JB_TOKEN_SPACE;
          }
        case 51:
          break;
        case 1: 
          { return JB_TOKEN_WORD;
          }
        case 52:
          break;
        case 29: 
          { return JB_TOKEN_LIFECYCLE;
          }
        case 53:
          break;
        case 6: 
          { return JB_TOKEN_PIPE;
          }
        case 54:
          break;
        case 13: 
          { return JB_TOKEN_COMMENT;
          }
        case 55:
          break;
        case 11: 
          { return JB_TOKEN_DBRACKET_CLOSE;
          }
        case 56:
          break;
        case 18: 
          { return JB_TOKEN_PATH;
          }
        case 57:
          break;
        case 5: 
          { return JB_TOKEN_BRACKET_CLOSE;
          }
        case 58:
          break;
        case 30: 
          { return JB_TOKEN_GIVEN_STORIES;
          }
        case 59:
          break;
        case 16: 
          { return JB_TOKEN_WHEN;
          }
        case 60:
          break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
