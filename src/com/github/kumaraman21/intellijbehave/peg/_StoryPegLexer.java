/* The following code was generated by JFlex 1.4.3 on 26.03.15 18:27 */

package com.github.kumaraman21.intellijbehave.peg;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.github.kumaraman21.intellijbehave.parser.IStoryPegElementType.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26.03.15 18:27 from the specification file
 * <tt>C:/Users/debritod/Work/Intellij-Idea/IntelliJBehave/src/com/github/kumaraman21/intellijbehave/peg/_StoryPegLexer.flex</tt>
 */
public class _StoryPegLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\1\1\2\22\0\1\1\1\45\4\10"+
    "\1\47\5\10\1\46\1\11\1\7\1\5\12\6\1\20\1\10\1\50"+
    "\1\10\1\51\1\10\1\4\1\36\1\55\1\12\1\61\1\40\1\12"+
    "\1\31\3\12\1\60\1\52\1\14\1\21\1\57\3\12\1\25\1\35"+
    "\2\12\1\33\3\12\4\10\1\13\1\10\1\17\1\12\1\26\1\37"+
    "\1\15\1\53\1\12\1\34\1\23\2\12\1\44\1\42\1\27\1\30"+
    "\1\43\1\12\1\22\1\32\1\16\1\12\1\24\1\12\1\41\1\54"+
    "\1\12\1\10\1\56\2\10\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\5"+
    "\1\7\1\5\1\7\1\10\7\7\1\5\1\11\1\12"+
    "\1\13\1\14\2\7\1\15\4\0\12\7\1\0\1\16"+
    "\1\17\2\7\2\0\7\7\1\20\2\7\1\21\2\7"+
    "\4\0\4\7\1\22\1\23\5\7\2\24\1\0\1\25"+
    "\2\7\1\26\5\7\1\0\4\7\1\27\3\7\1\30"+
    "\6\7\1\31\7\7\1\32\1\7\1\33\1\34\1\7"+
    "\1\35\1\7\1\36\2\7\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\62\0\372\0\310"+
    "\0\u012c\0\u012c\0\u015e\0\62\0\u0190\0\u01c2\0\u01f4\0\u0226"+
    "\0\u0258\0\u028a\0\u02bc\0\u02ee\0\62\0\62\0\u0320\0\u0352"+
    "\0\u0384\0\u03b6\0\62\0\226\0\310\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc"+
    "\0\u060e\0\u0640\0\62\0\62\0\u0672\0\u06a4\0\u06d6\0\u0708"+
    "\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u012c"+
    "\0\u0898\0\u08ca\0\62\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4"+
    "\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u012c\0\u012c\0\u0af0"+
    "\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0960\0\u0992\0\u0bea\0\62"+
    "\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a"+
    "\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\62\0\u0ea6\0\u0ed8"+
    "\0\u0f0a\0\u0dac\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036"+
    "\0\62\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194"+
    "\0\62\0\u11c6\0\u012c\0\62\0\u11f8\0\62\0\u122a\0\62"+
    "\0\u125c\0\u128e\0\62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\6"+
    "\1\10\1\11\1\12\1\13\3\11\1\14\1\15\3\11"+
    "\1\16\3\11\1\17\1\11\1\20\1\11\1\21\1\22"+
    "\1\11\1\23\4\11\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\2\11\1\32\1\33\3\11\63\0\1\3\2\4"+
    "\57\0\1\34\2\4\62\0\1\35\1\36\2\35\1\0"+
    "\7\35\1\0\24\35\5\0\4\35\1\0\3\35\4\0"+
    "\1\35\1\36\1\7\1\37\1\0\1\35\6\11\1\0"+
    "\24\11\5\0\4\11\1\0\3\11\4\0\1\35\1\36"+
    "\1\11\1\35\1\0\1\35\6\11\1\0\24\11\5\0"+
    "\4\11\1\0\3\11\4\0\1\35\1\36\1\11\1\35"+
    "\1\0\1\35\3\11\1\40\2\11\1\0\24\11\5\0"+
    "\4\11\1\0\3\11\4\0\1\35\1\36\1\11\1\35"+
    "\1\0\1\35\5\11\1\41\1\0\24\11\5\0\4\11"+
    "\1\0\3\11\4\0\1\35\1\36\1\11\1\35\1\0"+
    "\1\35\6\11\1\0\5\11\1\42\16\11\5\0\4\11"+
    "\1\0\3\11\4\0\1\35\1\36\1\11\1\35\1\0"+
    "\1\35\6\11\1\0\2\11\1\43\21\11\5\0\4\11"+
    "\1\0\3\11\4\0\1\35\1\36\1\11\1\35\1\0"+
    "\1\35\6\11\1\0\13\11\1\44\10\11\5\0\4\11"+
    "\1\0\3\11\4\0\1\35\1\36\1\11\1\35\1\0"+
    "\1\35\6\11\1\0\13\11\1\45\10\11\5\0\4\11"+
    "\1\0\1\46\2\11\4\0\1\35\1\36\1\11\1\35"+
    "\1\0\1\35\6\11\1\0\6\11\1\47\15\11\5\0"+
    "\1\11\1\50\2\11\1\0\3\11\4\0\1\35\1\36"+
    "\1\11\1\35\1\0\1\35\6\11\1\0\20\11\1\51"+
    "\3\11\5\0\4\11\1\0\3\11\11\0\1\52\120\0"+
    "\1\53\62\0\1\54\14\0\1\35\1\36\1\11\1\35"+
    "\1\0\1\35\6\11\1\0\2\11\1\55\21\11\5\0"+
    "\4\11\1\0\3\11\4\0\1\35\1\36\1\11\1\35"+
    "\1\0\1\35\3\11\1\56\2\11\1\0\24\11\5\0"+
    "\4\11\1\0\3\11\4\0\1\57\1\0\2\57\1\0"+
    "\7\57\1\0\24\57\5\0\4\57\1\0\3\57\4\0"+
    "\1\35\1\36\1\60\1\35\1\0\7\35\1\0\24\35"+
    "\5\0\4\35\1\0\3\35\4\0\1\35\1\36\1\11"+
    "\1\35\1\0\1\35\4\11\1\61\1\11\1\0\24\11"+
    "\5\0\4\11\1\0\3\11\4\0\1\35\1\36\1\11"+
    "\1\35\1\0\1\35\6\11\1\0\1\11\1\62\22\11"+
    "\5\0\4\11\1\0\3\11\4\0\1\35\1\36\1\11"+
    "\1\35\1\0\1\35\3\11\1\63\2\11\1\0\24\11"+
    "\5\0\4\11\1\0\3\11\4\0\1\35\1\36\1\11"+
    "\1\35\1\0\1\35\6\11\1\0\3\11\1\64\20\11"+
    "\5\0\4\11\1\0\3\11\4\0\1\35\1\36\1\11"+
    "\1\35\1\0\1\35\3\11\1\65\2\11\1\0\24\11"+
    "\5\0\4\11\1\0\3\11\4\0\1\35\1\36\1\11"+
    "\1\35\1\0\1\35\3\11\1\66\2\11\1\0\24\11"+
    "\5\0\4\11\1\0\3\11\4\0\1\35\1\36\1\11"+
    "\1\35\1\0\1\35\6\11\1\0\24\11\5\0\4\11"+
    "\1\0\1\11\1\67\1\11\4\0\1\35\1\36\1\11"+
    "\1\35\1\0\1\35\6\11\1\0\16\11\1\70\5\11"+
    "\5\0\4\11\1\0\3\11\4\0\1\35\1\36\1\11"+
    "\1\35\1\0\1\35\4\11\1\71\1\11\1\0\24\11"+
    "\5\0\4\11\1\0\3\11\4\0\1\35\1\36\1\11"+
    "\1\35\1\0\1\35\5\11\1\72\1\0\24\11\5\0"+
    "\4\11\1\0\3\11\11\0\1\73\54\0\1\35\1\36"+
    "\1\11\1\35\1\0\1\35\6\11\1\0\24\11\5\0"+
    "\1\11\1\74\2\11\1\0\3\11\4\0\1\35\1\36"+
    "\1\11\1\35\1\0\1\35\6\11\1\0\24\11\5\0"+
    "\1\11\1\75\2\11\1\0\3\11\3\76\1\0\1\77"+
    "\1\100\2\77\1\76\7\77\1\76\24\77\5\76\4\77"+
    "\1\76\3\77\4\0\1\35\1\36\1\60\1\101\1\0"+
    "\7\35\1\0\24\35\5\0\4\35\1\0\3\35\4\0"+
    "\1\35\1\36\1\11\1\35\1\0\1\35\5\11\1\102"+
    "\1\0\24\11\5\0\4\11\1\0\3\11\4\0\1\35"+
    "\1\36\1\11\1\35\1\0\1\35\6\11\1\0\1\11"+
    "\1\103\22\11\5\0\4\11\1\0\3\11\4\0\1\35"+
    "\1\36\1\11\1\35\1\0\1\35\6\11\1\0\6\11"+
    "\1\104\15\11\5\0\4\11\1\0\3\11\4\0\1\35"+
    "\1\36\1\11\1\35\1\0\1\35\3\11\1\105\2\11"+
    "\1\0\24\11\5\0\4\11\1\0\3\11\4\0\1\35"+
    "\1\36\1\11\1\35\1\0\1\35\6\11\1\0\6\11"+
    "\1\106\15\11\5\0\4\11\1\0\3\11\4\0\1\35"+
    "\1\36\1\11\1\35\1\0\1\35\6\11\1\0\6\11"+
    "\1\107\15\11\5\0\4\11\1\0\3\11\4\0\1\35"+
    "\1\36\1\11\1\35\1\0\1\35\6\11\1\0\17\11"+
    "\1\110\4\11\5\0\4\11\1\0\3\11\4\0\1\35"+
    "\1\36\1\11\1\35\1\0\1\35\3\11\1\111\2\11"+
    "\1\0\24\11\5\0\4\11\1\0\3\11\4\0\1\35"+
    "\1\36\1\11\1\35\1\0\1\35\6\11\1\0\21\11"+
    "\1\112\2\11\5\0\4\11\1\0\3\11\4\0\1\35"+
    "\1\36\1\11\1\35\1\0\1\35\3\11\1\113\2\11"+
    "\1\0\24\11\5\0\4\11\1\0\3\11\4\0\1\35"+
    "\1\36\1\11\1\35\1\0\1\35\6\11\1\0\7\11"+
    "\1\114\14\11\5\0\4\11\1\0\3\11\4\0\1\115"+
    "\1\0\2\115\1\0\7\115\1\0\24\115\5\0\4\115"+
    "\1\0\3\115\3\76\1\0\1\116\1\100\2\116\1\76"+
    "\7\116\1\76\24\116\5\76\4\116\1\76\3\116\4\0"+
    "\1\116\1\0\2\116\1\0\7\116\1\0\24\116\5\0"+
    "\4\116\1\0\3\116\4\0\1\35\1\36\1\117\1\35"+
    "\1\0\7\35\1\0\24\35\5\0\4\35\1\0\3\35"+
    "\4\0\1\35\1\36\1\11\1\35\1\0\1\35\6\11"+
    "\1\120\24\11\5\0\4\11\1\0\3\11\4\0\1\35"+
    "\1\36\1\11\1\35\1\0\1\35\5\11\1\121\1\0"+
    "\24\11\5\0\4\11\1\0\3\11\4\0\1\35\1\36"+
    "\1\11\1\35\1\0\1\35\5\11\1\122\1\0\24\11"+
    "\5\0\4\11\1\0\3\11\4\0\1\35\1\36\1\11"+
    "\1\35\1\0\1\35\6\11\1\0\6\11\1\123\15\11"+
    "\5\0\4\11\1\0\3\11\4\0\1\35\1\36\1\11"+
    "\1\35\1\0\1\35\6\11\1\0\1\124\23\11\5\0"+
    "\4\11\1\0\3\11\4\0\1\35\1\36\1\11\1\35"+
    "\1\0\1\35\6\11\1\0\1\11\1\125\22\11\5\0"+
    "\4\11\1\0\3\11\4\0\1\35\1\36\1\11\1\35"+
    "\1\0\1\35\6\11\1\0\22\11\1\126\1\11\5\0"+
    "\4\11\1\0\3\11\4\0\1\35\1\36\1\11\1\35"+
    "\1\0\1\35\6\11\1\0\5\11\1\127\16\11\5\0"+
    "\4\11\1\0\3\11\4\0\1\35\1\36\1\11\1\35"+
    "\1\0\1\35\6\11\1\0\1\11\1\130\22\11\5\0"+
    "\4\11\1\0\3\11\4\0\1\35\1\36\1\117\1\131"+
    "\1\0\7\35\1\0\24\35\5\0\4\35\1\0\3\35"+
    "\4\0\1\35\1\36\1\11\1\35\1\0\1\35\4\11"+
    "\1\132\1\11\1\0\24\11\5\0\4\11\1\0\3\11"+
    "\4\0\1\35\1\36\1\11\1\35\1\0\1\35\6\11"+
    "\1\0\1\11\1\133\22\11\5\0\4\11\1\0\3\11"+
    "\4\0\1\35\1\36\1\11\1\35\1\0\1\35\6\11"+
    "\1\0\4\11\1\134\17\11\5\0\4\11\1\0\3\11"+
    "\4\0\1\35\1\36\1\11\1\35\1\0\1\35\1\11"+
    "\1\135\4\11\1\0\24\11\5\0\4\11\1\0\3\11"+
    "\4\0\1\35\1\36\1\11\1\35\1\0\1\35\6\11"+
    "\1\136\24\11\5\0\4\11\1\0\3\11\4\0\1\35"+
    "\1\36\1\11\1\35\1\0\1\35\6\11\1\0\23\11"+
    "\1\137\5\0\4\11\1\0\3\11\4\0\1\35\1\36"+
    "\1\11\1\35\1\0\1\35\6\11\1\0\24\11\5\0"+
    "\2\11\1\140\1\11\1\0\3\11\4\0\1\35\1\36"+
    "\1\11\1\35\1\0\1\35\3\11\1\141\2\11\1\0"+
    "\24\11\5\0\4\11\1\0\3\11\4\0\1\35\1\36"+
    "\1\142\1\35\1\0\7\35\1\0\24\35\5\0\4\35"+
    "\1\0\3\35\4\0\1\35\1\36\1\11\1\35\1\0"+
    "\1\35\6\11\1\0\2\11\1\143\21\11\5\0\4\11"+
    "\1\0\3\11\4\0\1\35\1\36\1\11\1\35\1\0"+
    "\1\35\6\11\1\0\2\11\1\144\21\11\5\0\4\11"+
    "\1\0\3\11\4\0\1\35\1\36\1\11\1\35\1\0"+
    "\1\35\4\11\1\145\1\11\1\0\24\11\5\0\4\11"+
    "\1\0\3\11\4\0\1\35\1\36\1\11\1\35\1\0"+
    "\1\35\6\11\1\0\24\11\5\0\4\11\1\0\2\11"+
    "\1\146\4\0\1\35\1\36\1\11\1\35\1\0\1\35"+
    "\3\11\1\147\2\11\1\0\24\11\5\0\4\11\1\0"+
    "\3\11\4\0\1\35\1\36\1\11\1\35\1\0\1\35"+
    "\6\11\1\0\5\11\1\150\16\11\5\0\4\11\1\0"+
    "\3\11\4\0\1\35\1\36\1\11\1\35\1\0\1\35"+
    "\6\11\1\151\24\11\5\0\4\11\1\0\3\11\4\0"+
    "\1\35\1\36\1\11\1\35\1\0\1\35\6\11\1\0"+
    "\3\11\1\152\20\11\5\0\4\11\1\0\3\11\4\0"+
    "\1\35\1\36\1\11\1\35\1\0\1\35\6\11\1\0"+
    "\7\11\1\153\14\11\5\0\4\11\1\0\3\11\4\0"+
    "\1\35\1\36\1\11\1\35\1\0\1\35\6\11\1\0"+
    "\7\11\1\154\14\11\5\0\4\11\1\0\3\11\4\0"+
    "\1\35\1\36\1\11\1\35\1\0\1\35\6\11\1\0"+
    "\24\11\5\0\4\11\1\0\1\155\2\11\4\0\1\35"+
    "\1\36\1\11\1\35\1\0\1\35\6\11\1\0\11\11"+
    "\1\156\12\11\5\0\4\11\1\0\3\11\4\0\1\35"+
    "\1\36\1\11\1\35\1\0\1\35\6\11\1\0\23\11"+
    "\1\157\5\0\4\11\1\0\3\11\4\0\1\35\1\36"+
    "\1\11\1\35\1\0\1\35\3\11\1\160\2\11\1\0"+
    "\24\11\5\0\4\11\1\0\3\11\4\0\1\35\1\36"+
    "\1\11\1\35\1\0\1\35\6\11\1\161\24\11\5\0"+
    "\4\11\1\0\3\11\4\0\1\35\1\36\1\11\1\35"+
    "\1\0\1\35\6\11\1\0\1\11\1\162\22\11\5\0"+
    "\4\11\1\0\3\11\4\0\1\35\1\36\1\11\1\35"+
    "\1\0\1\35\6\11\1\0\14\11\1\163\7\11\5\0"+
    "\4\11\1\0\3\11\4\0\1\35\1\36\1\11\1\35"+
    "\1\0\1\35\6\11\1\164\24\11\5\0\4\11\1\0"+
    "\3\11\4\0\1\35\1\36\1\11\1\35\1\0\1\35"+
    "\3\11\1\165\2\11\1\0\24\11\5\0\4\11\1\0"+
    "\3\11\4\0\1\35\1\36\1\11\1\35\1\0\1\35"+
    "\6\11\1\166\24\11\5\0\4\11\1\0\3\11\4\0"+
    "\1\35\1\36\1\11\1\35\1\0\1\35\6\11\1\0"+
    "\2\11\1\167\21\11\5\0\4\11\1\0\3\11\4\0"+
    "\1\35\1\36\1\11\1\35\1\0\1\35\6\11\1\170"+
    "\24\11\5\0\4\11\1\0\3\11\4\0\1\35\1\36"+
    "\1\11\1\35\1\0\1\35\3\11\1\171\2\11\1\0"+
    "\24\11\5\0\4\11\1\0\3\11\4\0\1\35\1\36"+
    "\1\11\1\35\1\0\1\35\6\11\1\0\11\11\1\172"+
    "\12\11\5\0\4\11\1\0\3\11\4\0\1\35\1\36"+
    "\1\11\1\35\1\0\1\35\6\11\1\173\24\11\5\0"+
    "\4\11\1\0\3\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\5\1\1\11\10\1\2\11"+
    "\4\1\1\11\4\0\12\1\1\0\2\11\2\1\2\0"+
    "\12\1\1\11\2\1\4\0\15\1\1\0\1\11\10\1"+
    "\1\0\4\1\1\11\12\1\1\11\7\1\1\11\2\1"+
    "\1\11\1\1\1\11\1\1\1\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _StoryPegLexer() {
    this((java.io.Reader)null);
  }


  public _StoryPegLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _StoryPegLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return STORY_TOKEN_PUNCT;
          }
        case 32: break;
        case 7: 
          { return STORY_TOKEN_WORD;
          }
        case 33: break;
        case 13: 
          { return STORY_TOKEN_PIPE;
          }
        case 34: break;
        case 27: 
          { return STORY_TOKEN_DOT;
          }
        case 35: break;
        case 20: 
          { return STORY_TOKEN_PATH;
          }
        case 36: break;
        case 17: 
          { return STORY_TOKEN_COMMENT;
          }
        case 37: break;
        case 4: 
          { return STORY_TOKEN_AT;
          }
        case 38: break;
        case 28: 
          { return STORY_TOKEN_EXAMPLES;
          }
        case 39: break;
        case 23: 
          { return STORY_TOKEN_AFTER;
          }
        case 40: break;
        case 14: 
          { return STORY_TOKEN_DBRACKET_OPEN;
          }
        case 41: break;
        case 30: 
          { return STORY_TOKEN_LIFECYCLE;
          }
        case 42: break;
        case 24: 
          { return STORY_TOKEN_IP;
          }
        case 43: break;
        case 18: 
          { return STORY_TOKEN_WHEN;
          }
        case 44: break;
        case 15: 
          { return STORY_TOKEN_DBRACKET_CLOSE;
          }
        case 45: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 46: break;
        case 10: 
          { return STORY_TOKEN_AMPERSAND;
          }
        case 47: break;
        case 2: 
          { return STORY_TOKEN_SPACE;
          }
        case 48: break;
        case 26: 
          { return STORY_TOKEN_SCENARIO;
          }
        case 49: break;
        case 12: 
          { return STORY_TOKEN_BRACKET_CLOSE;
          }
        case 50: break;
        case 19: 
          { return STORY_TOKEN_THEN;
          }
        case 51: break;
        case 29: 
          { return STORY_TOKEN_NARRATIVE;
          }
        case 52: break;
        case 3: 
          { return STORY_TOKEN_NEWLINE;
          }
        case 53: break;
        case 25: 
          { return STORY_TOKEN_BEFORE;
          }
        case 54: break;
        case 21: 
          { return STORY_TOKEN_META;
          }
        case 55: break;
        case 9: 
          { return STORY_TOKEN_COMMA;
          }
        case 56: break;
        case 11: 
          { return STORY_TOKEN_BRACKET_OPEN;
          }
        case 57: break;
        case 16: 
          { return STORY_TOKEN_AND;
          }
        case 58: break;
        case 22: 
          { return STORY_TOKEN_GIVEN;
          }
        case 59: break;
        case 6: 
          { return STORY_TOKEN_NUMBER;
          }
        case 60: break;
        case 31: 
          { return STORY_TOKEN_GIVEN_STORIES;
          }
        case 61: break;
        case 8: 
          { return STORY_TOKEN_COLON;
          }
        case 62: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
