{
  parserClass="com.github.kumaraman21.intellijbehave.parser.StoryPegParser"
  parserUtilClass="com.github.kumaraman21.intellijbehave.peg.StoryPegParserUtil"
  elementTypeHolderClass="com.github.kumaraman21.intellijbehave.parser.IStoryPegElementType"
  elementTypePrefix="STORY_"
  elementTypeClass="com.github.kumaraman21.intellijbehave.highlighter.StoryPegElementType"
  tokenTypeClass="com.github.kumaraman21.intellijbehave.highlighter.StoryPegTokenType"
  psiClassPrefix="Story"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.kumaraman21.intellijbehave.psi"
  psiImplPackage="com.github.kumaraman21.intellijbehave.psi.impl"

  tokens=[
    TOKEN_META = 'Meta:'
    TOKEN_NARRATIVE = 'Narrative:'
    TOKEN_SCENARIO = 'Scenario:'
    TOKEN_GIVEN_STORIES= 'GivenStories:'
    TOKEN_GIVEN = 'Given'
    TOKEN_WHEN='When'
    TOKEN_THEN='Then'
    TOKEN_AND='And'
    TOKEN_EXAMPLES='Examples:'
    TOKEN_COLON=":"
    TOKEN_AT="@"
    TOKEN_COMMA=","
    TOKEN_AMPERSAND="&"
    TOKEN_DBRACKET_OPEN = "<<"
    TOKEN_DBRACKET_CLOSE = ">>"
    TOKEN_BRACKET_OPEN = "<"
    TOKEN_BRACKET_CLOSE = ">"
    TOKEN_LIFECYCLE="Lifecycle:"
    TOKEN_BEFORE="Before:"
    TOKEN_AFTER="After:"
    TOKEN_PIPE='|'
    TOKEN_NEWLINE = "regexp:[ \t\f]*(\r|\n|\r\n|\Z)"
    TOKEN_SPACE='regexp:[ \t\f]+'
    TOKEN_COMMENT="regexp:\!--.*"

    TOKEN_USER_INJECT = 'regexp:<<\S+>>'
    TOKEN_INJECT = 'regexp:<\S+>'
    TOKEN_PATH = 'regexp:([a-zA-Z0-9]|_|@|\.|-)+(/([a-zA-Z0-9]|_|@|\.|-)+)+'
    TOKEN_NUMBER = 'regexp:[0-9]+'
    TOKEN_IP = "regexp:[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+"
    TOKEN_PUNCT = "regexp:[!\"#$%&'()*+,-./;=?\[\\\]\^_`{}~]"

    TOKEN_WORD = 'regexp:[a-zA-Z_0-9]+'
  ]
  extends("StoryPath")="com.github.kumaraman21.intellijbehave.peg.PegStoryPath"
  extends("Step")="com.github.kumaraman21.intellijbehave.parser.JBehaveStep"
  extends("ScenarioTitle|TableCell|Description|NarrativeText|StepLine|Uri|IpAdress")="com.github.kumaraman21.intellijbehave.peg.JBehaveRule"

}
root ::= !<<eof>> (Story|Table) {pin=1}
Story ::= Newline* Description? Newline* MetaStatement? Newline* Narrative? Newline* GivenStories? Newline* Lifecycle? Newline* Scenario+ Newline*
Description ::= MultiTextLine
MetaStatement ::= TOKEN_META (Space? MetaElement)? Newline (MetaElement Newline?)* {pin=1 }
MetaElement::= TOKEN_AT MetaKey Space MetaValue
MetaKey::= TOKEN_WORD TOKEN_COLON?
MetaValue::= (Punct|Word|Space)+

Narrative ::= TOKEN_NARRATIVE Newline* NarrativeText {pin=1 }
NarrativeText ::= MultiTextLine

GivenStories::= TOKEN_GIVEN_STORIES SpaceStar StoryPaths Newline {pin=1 }
private StoryPaths ::= StoryPath ( SpaceStar Newline? TOKEN_COMMA Newline? SpaceStar StoryPath)*
StoryPath ::= TOKEN_PATH

Lifecycle::= TOKEN_LIFECYCLE LifecycleBefore? LifecycleAfter?
LifecycleBefore::= TOKEN_BEFORE Step+ {pin=2}
LifecycleAfter::= TOKEN_AFTER Step+ {pin=2}

Scenario ::= TOKEN_SCENARIO SpaceStar (ScenarioTitle Newline)? MetaStatement? GivenStories? ((Step |StepComment)+ Examples?)* {pin=1}
ScenarioTitle ::= Line

Step ::=  StepPar SpaceStar StepArgument Newline* {pin=1 recoverWhile=RecoverStep}
StepPar ::= TOKEN_WHEN|TOKEN_GIVEN|TOKEN_THEN|TOKEN_AND

StepComment ::= TOKEN_COMMENT Newline+//Anything* Newline
//private Anything ::= TOKEN_WHEN|TOKEN_THEN|TOKEN_GIVEN|TOKEN_AND|StoryPath|Line|TOKEN_PIPE|Punct|Space
StepArgument ::=  StepLine SpaceStar StepPostParameter | StepLine

private StepSimpleWord ::= Uri|IpAddress|Alnum|TOKEN_USER_INJECT|TOKEN_INJECT
private StepWord ::= StepSimpleWord+
StepLine ::= StepWord (WordSeparator StepWord)* Punct?

StepPostParameter ::= Newline* Table| StoryPaths

RecoverStep ::= !(TOKEN_GIVEN|TOKEN_AND|TOKEN_THEN|TOKEN_WHEN|TOKEN_SCENARIO|TOKEN_COMMENT|TOKEN_GIVEN_STORIES|TOKEN_META|TOKEN_EXAMPLES)

Examples ::= TOKEN_EXAMPLES (Table|StoryPath) {pin=1}

Table ::= (SpaceStar TableRow)+
TableRow ::= TOKEN_PIPE (SpaceStar TableCell SpaceStar | TableCellEmpty) TOKEN_PIPE ((SpaceStar TableCell SpaceStar | TableCellEmpty) TOKEN_PIPE)* Newline
TableCell ::= Line
TableCellEmpty ::= SpaceStar

MultiTextLine ::= (SpaceStar Line Newline)+

private SimpleWord ::= Uri|IpAddress|Alnum|TOKEN_USER_INJECT|TOKEN_INJECT|StoryPath|Punct
private Word ::= SimpleWord+
private WordSeparator ::= (Punct|Space)+
private Line ::= Word (WordSeparator Word)*

UriWord ::= Alnum|TOKEN_USER_INJECT|TOKEN_INJECT
UriIdentifier ::= IpAddress| (UriWord|TOKEN_DOT)+
Uri::= Alnum TOKEN_COLON Word TOKEN_AT UriIdentifier (TOKEN_COLON Alnum)? {pin=5}
IpAddress ::= TOKEN_IP | Alnum (TOKEN_DOT Alnum)+
private Alnum::=TOKEN_WORD|TOKEN_NUMBER

private Newline ::= TOKEN_NEWLINE
private Space ::= TOKEN_SPACE
private SpaceStar ::= TOKEN_SPACE*
private Punct ::= TOKEN_PUNCT | TOKEN_BRACKET_CLOSE|TOKEN_BRACKET_OPEN|TOKEN_COMMA|TOKEN_COLON|TOKEN_AMPERSAND
