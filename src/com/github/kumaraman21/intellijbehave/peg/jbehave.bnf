{
    parserClass="com.github.kumaraman21.intellijbehave.parser.StoryPegParser"
  parserUtilClass="com.github.kumaraman21.intellijbehave.parser.StoryPegParserUtil"
  //parserUtilClass="com.github.kumaraman21.intellijbehave.parser.StoryPegParserUtil"
    //stubParserClass="com.github.kumaraman21.intellijbehave.parser.StoryPegParserUtil"
    //implements="com.github.kumaraman21.intellijbehave.psi.StoryPegCompositeElement"
    //extends="com.github.kumaraman21.intellijbehave.psi.impl.StoryPegCompositeElementImpl"
    elementTypeHolderClass="com.github.kumaraman21.intellijbehave.parser.IStoryPegElementType"
    elementTypePrefix="STORY_"
    elementTypeClass="com.github.kumaraman21.intellijbehave.highlighter.StoryPegElementType"
    tokenTypeClass="com.github.kumaraman21.intellijbehave.highlighter.StoryPegTokenType"
    psiClassPrefix="Story"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.kumaraman21.intellijbehave.psi"
    psiImplPackage="com.github.kumaraman21.intellijbehave.psi.impl"
    //psiImplUtilClass="com.github.kumaraman21.intellijbehave.psi.impl.StoryPegPsiImplUtil"

  tokens=[
    TOKEN_META = 'Meta:'
    TOKEN_NARRATIVE = 'Narrative:'
    TOKEN_SCENARIO = 'Scenario:'
    TOKEN_GIVEN_STORIES= 'GivenStories:'
    TOKEN_GIVEN = 'Given'
    TOKEN_WHEN='When'
    TOKEN_THEN='Then'
    TOKEN_AND='And'
    TOKEN_EXAMPLES='Examples:'
    TOKEN_COMMENT='regexp:!--.*'

    TOKEN_PUNCT = 'regexp:[\p{Punct}&&[^|@:]]'
    TOKEN_WORD = 'regexp:[\w]+'
    //TOKEN_WORD_EX = 'regexp:[\w]+\p{Blank}*:'
    TOKEN_INJECT = 'regexp:<[\w.@-]+>'
    TOKEN_USER_INJECT = 'regexp:<<[\w.@-|]+>>'
    TOKEN_PATH = 'regexp:[\w._@]+(/[\w._@]+)+'
    TOKEN_META_KEY_START = '@'
    TOKEN_TABLE_ROW_DELIMITER='|'
    TOKEN_NEWLINE='regexp:(\r|\n|\r\n)+'
    TOKEN_SPACE='regexp:[ \t]'
    TOKEN_SPACE_PLUS='regexp:[ \t]+'
  ]
}
root ::= !<<eof>> Story {pin=1}
// The story describes a feature via description, narrative and a set of scenarios
Story ::= Description? MetaStatement? Narrative? GivenStories? Lifecycle? Scenario+
// JBehave Grammar expressed in EBNF (http://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form)

// The Description is expressed by any sequence of words that must not contain any keywords at start of lines.
Description ::= MultiTextLine

// The meta is identified by keyword "Meta:" (or equivalent in I18n-ed locale),
// It is followed by any number of meta elements
MetaStatement ::= TOKEN_META (Space MetaElement)? Newline (MetaElement Newline)* {pin=1 }
// The meta element is identified by keyword "@" (or equivalent in I18n-ed locale),
// It is followed by a name-value pair, where the value can be empty or have multiple words
MetaElement::= TOKEN_META_KEY_START MetaKey LINE_WS MetaValue
MetaKey::= '@' TOKEN_WORD
MetaValue::=TOKEN_WORD
// The narrative is identified by keyword "Narrative:" (or equivalent in I18n-ed locale),
// It is followed by the narrative elements
Narrative ::= TOKEN_NARRATIVE Newline? NarrativeText {pin=1 }
NarrativeText ::= MultiTextLine

// The comma-separated list of story resources that specify the stories to be run before a story or a scenario
GivenStories::= TOKEN_GIVEN_STORIES SpaceStar StoryPaths Newline {pin=1 }
StoryPaths ::= StoryPath (',' StoryPath)*
StoryPath ::= TOKEN_PATH

// The lifecycle is identified by keyword "Lifecycle:" (or equivalent in I18n-ed locale),
// It is followed by the lifecycle elements
Lifecycle::= "Lifecycle:" LifecycleBefore? LifecycleAfter?

// The before lifecyle element identified by keyword "Before:" (or equivalent in I18n-ed locale),
// followed by one or more steps
LifecycleBefore::= "Before:" Step+ {pin=2}

// The after lifecyle element identified by keyword "After:" (or equivalent in I18n-ed locale),
// followed by one or more steps
LifecycleAfter::= "After:" Step+ {pin=2}

// The scenario is identified by keyword "Scenario:" (or equivalent in I18n-ed locale),
// which is optional in the case of a single scenario.
// It can optionally be followed by a title, which is expressed by any sequence of words
// that must not contain any keywords at start of lines.
// It is followed by one or more Steps.
// Finally the optional Examples table, which if present will execute the scenario for as many table rows present
Scenario ::= TOKEN_SCENARIO SpaceStar (Title Newline)? MetaStatement? GivenStories? (Step | StepComment)+ Examples? {pin=1}
// The free-text description
Title ::= TOKEN_WORD ((','|Space) TOKEN_WORD)* | StoryPath

// The scenario step is a step starting work followed by any number of characters

//Step ::= StepTypeGiven | StepTypeWhen | StepTypeThen | StepTypeAnd
Step ::=  StepType (StepArgumentPath|StepArgumentTable|StepArgumentStandard) {pin=1 recoverWhile=RecoverStep}
StepType ::= (TOKEN_WHEN|TOKEN_GIVEN|TOKEN_THEN|TOKEN_AND)

StepArgumentStandard ::= Line Newline
StepArgumentTable ::= LineEx Newline (Table)?
StepArgumentPath ::= LineEx SpacePlus StoryPath Newline

RecoverStep ::= !(TOKEN_GIVEN|TOKEN_AND|TOKEN_THEN|TOKEN_WHEN|TOKEN_SCENARIO|TOKEN_COMMENT|TOKEN_GIVEN_STORIES|TOKEN_META|TOKEN_EXAMPLES)

StepComment ::= TOKEN_COMMENT Newline


// The examples table
Examples ::= TOKEN_EXAMPLES (Table|StoryPath) {pin=1}

// The examples table comprises of a header row and data rows
Table ::= TableRow+

// The examples table row contains the column values, separated by TOKEN_TABLE_ROW_DELIMITER
TableRow ::= TOKEN_TABLE_ROW_DELIMITER (SpaceStar TableCell SpaceStar | TableCellEmpty) TOKEN_TABLE_ROW_DELIMITER ((SpaceStar TableCell SpaceStar | TableCellEmpty) TOKEN_TABLE_ROW_DELIMITER)* Newline
TableCell ::= (Word|TOKEN_PUNCT) (SpaceStar (Word|TOKEN_PUNCT))*
TableCellEmpty ::= SpaceStar

Line ::= (Word|Space|TOKEN_PUNCT)+
LineEx ::= (Word|Space|TOKEN_PUNCT)* ':'
MultiTextLine ::= ((Word  SpaceStar ':'|Word |Space|TOKEN_PUNCT)+ Newline)+

private Word ::= Uri|Alnum|Inject|UserInject
UserInject ::= TOKEN_USER_INJECT
Inject ::= TOKEN_INJECT
Uri::= TOKEN_WORD ':' TOKEN_WORD '@' (TOKEN_WORD '.')* TOKEN_WORD ':' TOKEN_WORD
Alnum::=TOKEN_WORD

private Newline ::= TOKEN_NEWLINE|<<eof>>
private Space ::= TOKEN_SPACE
private SpacePlus ::= TOKEN_SPACE+
private SpaceStar ::= TOKEN_SPACE*
